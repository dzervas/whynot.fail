<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Microcontrollers on WhyNot.Fail</title><link>https://whynot.fail/tags/microcontrollers/</link><description>Recent content in Microcontrollers on WhyNot.Fail</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 28 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://whynot.fail/tags/microcontrollers/index.xml" rel="self" type="application/rss+xml"/><item><title>Clear nrf52 saved BT bonds</title><link>https://whynot.fail/notes/clear-nrf52-saved-bt-bonds/</link><pubDate>Wed, 28 Apr 2021 00:00:00 +0000</pubDate><guid>https://whynot.fail/notes/clear-nrf52-saved-bt-bonds/</guid><description>&lt;p>Often the nRF52 micros get stuck or misbehave and reach a weird state with the pairings. Often the solution is just to clear them so here’s adafruit’s code to do that and a &lt;a href="http://platform.io/">platform.io&lt;/a> ini to make it easy.&lt;/p>
&lt;p>&lt;code>platformio.ini&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Bash" data-lang="Bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>env:clearbonds&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>platform &lt;span style="color:#f92672">=&lt;/span> nordicnrf52
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>board &lt;span style="color:#f92672">=&lt;/span> particle_xenon
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>framework &lt;span style="color:#f92672">=&lt;/span> arduino
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The board can be any nrf52 board, it can be any generic board that uses the same chip that you actually have. For example &lt;code>particle_xenon&lt;/code> uses nRF52840, so it can be used for any 52840 board. It might though not flash the correct LEDs, so just hook up the serial port.&lt;/p></description></item><item><title>Rusty Arduino bindings using PlatformIO</title><link>https://whynot.fail/coding/rusty-arduino-bindings/</link><pubDate>Sun, 04 Oct 2020 00:00:00 +0000</pubDate><guid>https://whynot.fail/coding/rusty-arduino-bindings/</guid><description>&lt;p>Oh Rust, how much I love you… Love at &lt;del>first&lt;/del> third sight, like I had with my English teacher. She was ugly but I was 10 and she was a female that stood near me for an hour and talked to me in a soothing voice. That’s what Rust is, ugly but it’s there for you with a soothing voice.&lt;/p>
&lt;p>On the other side we have C++ that the Arduino Framework is written on. Classes here and there, mixed with C, requiring a 3 day workshop to understand what’s the “standard” way of blinking a LED - hence the headache of each Arduino library taking the matters on their own hands. I hate reading C++ by the way and don’t know how to write it. That’s why I want to just forget about it and just call it from Rust.&lt;/p></description></item><item><title>Adding more magic to the Magicforce 68</title><link>https://whynot.fail/hardware/magicforce-68-reversing/</link><pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate><guid>https://whynot.fail/hardware/magicforce-68-reversing/</guid><description>&lt;p>This is a small journey on how I reverse engineered the &lt;a href="https://drop.com/buy/magicforce-68-key-mini-mechanical-keyboard">MagicForce 68&lt;/a> keyboard and tried to add bluetooth functionality to it. It’s a small keyboard (68 keys, 65%) and is USB-only (it’s not the smart model). It has a controller that I can’t flash with a custom firmware, so I had to hook wires on it.&lt;/p>
&lt;h1 id="the-hardware">The Hardware&lt;/h1>
&lt;p>The first step in determining what I was against, was to at least partially disassemble the keyboard.&lt;/p></description></item></channel></rss>