<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>WhyNot.Fail</title><link>https://whynot.fail/</link><description>Recent content on WhyNot.Fail</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 24 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://whynot.fail/index.xml" rel="self" type="application/rss+xml"/><item><title>Nix/NixOS is the new “dotfiles golf” - and that’s awesome</title><link>https://whynot.fail/nixos/the-new-dotfile-golf/</link><pubDate>Sat, 10 Aug 2024 00:00:00 +0000</pubDate><guid>https://whynot.fail/nixos/the-new-dotfile-golf/</guid><description>&lt;p>For the past month I’ve been transitioning to NixOS, both my work laptop and my personal desktop.&lt;/p>
&lt;p>It’s been an amazing voyage. The learning curve is steep for the first 1-2 days, till you grasp the whole idea but then that’s mostly it.&lt;/p>
&lt;p>The language syntax is a bit weird and ugly but it really is quite simple - and I say that with 0 background in math or functional languages.&lt;/p></description><content:encoded><p>For the past month I’ve been transitioning to NixOS, both my work laptop and my personal desktop.</p><p>It’s been an amazing voyage. The learning curve is steep for the first 1-2 days, till you grasp the whole idea but then that’s mostly it.</p><p>The language syntax is a bit weird and ugly but it really is quite simple - and I say that with 0 background in math or functional languages.</p><p>You quickly learn that “RTFM” is not a thing in Nix since there’s no manual and the tools at your disposal are<a href="http://grep.app">grep.app</a> to see what others did (though due to the frequent changes in how stuff work could mislead you) and the<a href="https://discourse.nixos.org">NixOS forums</a> which is amazing.</p><p>The question that arises before you even consider scrapping what you’ve been building for the past N years is “why? yea all the hipsters use it but WHY?”</p><p>I was very resilient too since every month or so something new and shiny comes up that nobody asked for, everyone around you loses their mind about it and 2 weeks later it’s abandoned.</p><p>welp, I have 2 extremely solid reasons: reproducibility and stability</p><h2 id="stability">Stability</h2><p>The idea in NixOS is that your whole OS is split in configurable and non-configurable parts. The configurable is managed by the<code>configuration.nix</code> file. The non-configurable is most probably files under your home directory, like browser files regarding your sessions n stuff that doesn’t make sense to configure statically.</p><p>Stability comes from the fact that after you change your<code>configuration.nix</code> you have to<code>rebuild</code> and then<code>switch</code> to the new generation for it to take effect. Every time you<code>rebuild</code>, a new “version” of your whole OS (only the managed part, the rest remain intact) gets created and<code>switch</code>ing to it activates it.</p><p>That means that you’re able to do something magic:<u><strong>rollbacks</strong></u>. Did you break your fstab? Boot to the previous working generation and you’re good to go! Did the latest update break your browser? rollback! The boot manager is configured to give you a choice of the last N generations so you just pick what you want - THAT easy, no weird arcane magic.</p><h2 id="reproducibility">Reproducibility</h2><p>That leads us to the second amazing feature: reproducibility.</p><p>I know that everyone talks about it when nix comes in the discussion but it does actually affect you, it’s not just a “good principal”.</p><p>Imagine being sure that your hacky script that logs you into your machine with port knocking works EVERY time - and when I say every time, I mean it. If the module (aka piece of nix code) that configures it compiles, it WILL work. Just formatted? it works. Moved from i3 to Plasma 6 and btrfs? it works.</p><p>It really empowers you and gives a much greater pleasure into optimizing small aspects of your desktop since you know that they’ll be there for quite a long time and are much harder to randomly break.</p><h2 id="golfing">Golfing</h2><p>So that brings us to this post’s title: dotfile golfing.</p><p>The dotfiles now hold a much greater power. It’s super easy to set up and keep 2 machines in sync. Just define some host-specific quirks for each machine (e.g. a desktop doesn’t need<code>laptop-tools</code> ) and you’re good to go.</p><p>That has led all the people with weird setups (⇒ people that have a<code>dotfiles</code> repo) to have a much, MUCH better experience. They don’t have to keep track of what they install and how so that they can set up the whole thing again.</p><p>Sets of dotifile hacks are now their own “packages” (flakes in nix world) that anyone can use -<a href="https://stylix.danth.me/">stylix</a> for example, which tries to do the impossible: make the theming/styling consistent across the whole OS, from NeoVim to GTK to Plymouth, all with the same colors and wallpapers.</p><h2 id="bonus">Bonus</h2><p>You also get the following amazing features as a bonus:</p><p>Formatting has become way, WAY easier. After setting up the partitions in a new machine,<code>nixos-install --flake github.com:dzervas/dotfiles</code> will set up the new machine. The next reboot will have everything ready for me - yes even that port knocking script - honestly the biggest hurdle when setting up a new machine after your nix config has stabilized is logging in to every service &amp; website you use</p><p>You can even create an ISO with your whole config ready to go with GitHub actions (as I did<a href="https://github.com/dzervas/dotfiles/blob/main/.github/workflows/iso.yaml">here</a>) so you can work on a new machine without even formatting. Boot the ISO and do whatever needs doing. My work laptop is now officially disposable!</p><hr><p>My nix config:<a href="https://github.com/dzervas/dotfiles">dotfiles</a></p></content:encoded></item><item><title>Fusion 360 Internals: Trying to re-invent Fusion’s GUI (and failing)</title><link>https://whynot.fail/reversing/fusion-360-internals/</link><pubDate>Sat, 25 Mar 2023 00:00:00 +0000</pubDate><guid>https://whynot.fail/reversing/fusion-360-internals/</guid><description>&lt;p>This is one of those weird ones where I try to do something batshit crazy and I end up inevitably failing. It was almost too clear that this is gonna be the path but I needed something to hyperfocus on to have some stress-free moments.&lt;/p>
&lt;p>This is how I tried to use only the engine/rendering canvas of Fusion and re-implement the whole GUI around it from scratch (toolbars, browser, history bar, etc.).&lt;/p></description><content:encoded><p>This is one of those weird ones where I try to do something batshit crazy and I end up inevitably failing. It was almost too clear that this is gonna be the path but I needed something to hyperfocus on to have some stress-free moments.</p><p>This is how I tried to use only the engine/rendering canvas of Fusion and re-implement the whole GUI around it from scratch (toolbars, browser, history bar, etc.).</p><h1 id="wait-what-what-do-you-mean-why-what">Wait what? What do you mean? Why? What?</h1><p>Ok so let’s take it from the top. I love Fusion’s UX. It’s amazing. Everything is where it should be and stuff just work as you expect them. It does some weird fuckery when you try to direct model (organic handles, mouse shells, etc.) but it’s not the point of the software anyway. And almost nobody can rival it in my eyes. I’ve tried Solidworks, OnShape, BricsCAD, FreeCAD, Solid Edge, SolveSpace, Rhino 3D with Grasshoper. I’ve tried it all. I’ve seen it all. I’m dissapointed.</p><p>“Awesome, where’s the problem”, I can hear you say.</p><p>Linux. The problem is Linux. Running Fusion on Linux is… shitty. While<a href="https://github.com/cryinkfly/Autodesk-Fusion-360-for-Linux">cryinkfly has done an amazing work on the matter</a>, it’s not good enough for me. Crashes, glitches, overlayed artifacts across all workspaces and in general it makes the app quite cumbersome. It kills the UX.</p><p>So there were 3 solutions to that problem:</p><ul><li><del>Pivot to Windows</del> - nope, I prefer to leave computers behind</li><li>Windows VM - It sucks, it’s slow and it also sucks</li><li>Hook Fusion using frida to fix the artifacts/problems (and maybe give the solutions to Autodesk almost ready to implement) - too hard, too specific and too fragile. An update could render my whole work useless</li><li>Fix wine - it’s actually the best solution as it will benefit more apps. But I thought it would be harder (little did I know…)
Instead, I chose the 4th (5th?) option: Use the “hard parts” of Fusion by re-write the GUI as an open-source shell. Sure it would require “some” reversing but at some point I could have a Window with JUST the Canvas in it (where the 3D objects are drawn).</li></ul><p>Before I let you know my evil plan (according to Autodesk I imagine), let’s talk a bit about the guts of Fusion</p><h1 id="fusion-360s-gui-internals">Fusion 360’s GUI internals</h1><p>Fusion is written completely in Qt 5, start to finish. At the time of writing (25 March 2023) it uses Qt 5.15.2, the upstream LTS version.</p><p>They use MANY of Qt’s features and every component is written in a different “Qt manner”. Is the whole app a Qt demonstration? I guess we’ll never know…</p><ul><li>The whole window is a<code>QGuiApplication</code> window</li><li>The top toolbar and the botton design history bar are regular<code>QWidgets</code>, buttons, labels, icons, tooltips and the rest</li><li>All the sidepanels and overlays (Learning Center, Data Panel, Browser, Comments and Notification Center) are all HTML/CSS/JS that run inside different<code>QtWebEngine</code>s with a custom<a href="https://github.com/chromiumembedded">CEF</a> that gives access to the JS→C++ bridge. That bridge is called<code>FermontJS</code> and talks with the<code>Neuron</code> engine BTW</li><li>I have no idea where, but QtQuick is involved somwhere</li><li>The main “viewport” or<code>Shell</code> as Autodesk calls it (the main gray window that 3D stuff appear) is something… weird. Something very weird. It’s a class inside the<code>NuBase10.dll</code> that is called<code>Nu::GraphicsCanvas</code>
The last bit is what we’re looking for. The<code>QtWidgets</code> parts can be re-written. The toolbar is dynamically generated based on some XMLs, the design history is by definition programmatically populated, HTML/CSS/JS components are just in the installation folder for anyone to grab,<code>FermontJS</code> is just a node script and<code>Neuron</code> can be run in its own process (I think???).</li></ul><p>Not easy to do all that but certaintly doable.The hard part would be that damned<code>GraphicsCanvas</code>. It has many other names,<code>Canvas</code>,<code>QtCanvas</code> (sub/super classes) but its the same damned thing. If I could make an instance of it on its own window it would prove that I can actually run the part of Fusion that handles the CAD engine and renders what the user sees.</p><h1 id="how-would-that-help-you-with-wine">How would that help you with wine?</h1><p>The plan for the “final form” of the project was:</p><ol><li>Wrap the required DLLs using winelib</li><li>Dynamically link against them a Rust binary that:</li><li>Cross-compile that binary for every platform</li><li>Create an installer that pulls the required DLLs so that Autodesk won’t cry us a river for “redistribution”
Not an easy project but kiiiiiinda, maaaaaybe doable.</li></ol><h1 id="so-whats-the-problems">So what’s the problem(s)?</h1><p>First of all, the<code>GraphicsCanvas</code> ain’t “just a<code>QtObject</code>”. At all. It’s too intertwined with commands, threads, events,<code>Shell</code>s,<code>Workspace</code>s, etc. for me to figure out. I just don’t get it. Couldn’t they just wrap a<code>QOpenGLWidget</code> or a<code>QSurface</code> and be done with it? Apparently not…</p><p>While they DID do both of the above, they also did sooooooo much more beyond that that my reversing skills started laughing hysterically - and not the good kind of laugh, the “oh boy what the actual fuck is this” kind of laugh.</p><p>Even so, I thought to start throwing shit to the wall till something sticks. I see the canvas gone, or glitched, or (praying) in a separate window and I whipped out frida.</p><p>But frida seems to be as confused as me when dealing with C++ MSVC ABI when dealing with object instances on Windows. I just tried calling<code>QWindow(nullptr)::QWindow</code> from the<code>Qt5Gui.dll</code> and after that call<code>show()::QWindow</code>. Frida wouldn’t have me do my shit. Frida was done with me.</p><h1 id="and-now">And now?</h1><p>This is the point where I give up. This might seem a small post but it took me a great 6 months to learn what I did. Did you know there’s a “Command Panel” in Fusion? Did you know that there’s a<a href="https://github.com/kantoku-code/Fusion360_Small_Tools_for_Developers">github repo</a> just describing the commands in it? Did you know that you can dump the Qt tree of Fusion while its running?</p><p>Useful Fusion commands (Opened by File > View > Show Text Commands (Ctrl-Alt-C), all commands are Txt):</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>TextCommands<span style="color:#f92672">.</span>List<span style="color:#f92672">/</span>hidden<span style="color:#f92672">-</span> Show all text commands</span></span><span style="display:flex;"><span>Options<span style="color:#f92672">.</span>DebugEnvironment<span style="color:#f92672">/</span>show<span style="color:#f92672">-</span> Show a debug environment, didn<span style="color:#e6db74">'t see something interesting</span></span></span><span style="display:flex;"><span>Options<span style="color:#f92672">.</span>showAllCommands<span style="color:#f92672">/</span>on<span style="color:#f92672">-</span><span style="color:#960050;background-color:#1e0010">???</span></span></span><span style="display:flex;"><span>Options<span style="color:#f92672">.</span>showAllOptions<span style="color:#f92672">-</span> Make MANY preferences visible</span></span><span style="display:flex;"><span>Toolkit<span style="color:#f92672">.</span>DumpQt<span style="color:#f92672">-</span> Dump QT object info<span style="color:#f92672">.</span> [<span style="color:#f92672">/</span>styles] [<span style="color:#f92672">/</span>class] [<span style="color:#f92672">/</span>rect]</span></span></code></pre></div><p>Also got to learn about C++ RTTI and vftables and that nothing can be compared to the hatred that I have for that FUCKING LANGUAGE THAT HELL GIFTED TO US.</p><p>REALLY. WHAT THE FUCK IS WRONG WITH YOU PEOPLE.</p><p>If someone is able to make a PoC that shows that indeed a Canvas can be drawn on its own (with some boilerplate), I’ll be more than happy to open this can of worms.</p><p>Also I re-implemented Fusion’s installer in python that also knows about Fusion’s build versions,<a href="https://github.com/dzervas/fusion360-streamer">check it out</a>.</p><p>C ya</p></content:encoded></item><item><title>The art of cracking software</title><link>https://whynot.fail/reversing/the-art-of-cracking-software/</link><pubDate>Wed, 02 Nov 2022 00:00:00 +0000</pubDate><guid>https://whynot.fail/reversing/the-art-of-cracking-software/</guid><description>&lt;p>As the years have gone by, it seems that cracking software is more and more synonymous to “malware”. As this world no longer knows how to operate in a manner of doing something for the common good, selfless moves that would give access to people that can’t bear the stupid “entry price” have been shadowed by moves that replace that “entry price” with remote access instead of money. It pains me and makes me sad, but at least I can share some aspect of it, as I’d rather not go to jail.&lt;/p></description><content:encoded><p>As the years have gone by, it seems that cracking software is more and more synonymous to “malware”. As this world no longer knows how to operate in a manner of doing something for the common good, selfless moves that would give access to people that can’t bear the stupid “entry price” have been shadowed by moves that replace that “entry price” with remote access instead of money. It pains me and makes me sad, but at least I can share some aspect of it, as I’d rather not go to jail.</p><p>For some reason I’m not completely sure, I’ve picked up the hobby of cracking niche softwares’ licensing mechanisms. Maybe it’s because that I know for a fact that they can be cracked - something that isn’t given for hacking cloud-based software.</p><p>This is a research post. I don’t use or share my cracks. I do it for fun. Please don’t hurt me.</p><h1 id="defining-the-target">Defining the target</h1><p>My targets are exclusively Windows programs, but I’m sure a lot of the described techniques apply to any OS.</p><p>Each time I start cracking a program, I’ve got to set a clear target. Most times is “permanent license that gives me access to everything” but that requires to know the following:</p><ul><li>Is there a trial version? If yes:</li><li>Forget about any kind of cloud-based features (cloud save, cloud-based computing, etc.)</li><li>Is the license “just a serial number” or a whole file (binary or not)?</li><li>Does the software provide means of offline license activation?</li><li>What language is the app written in?</li><li>Do we have any kind of debug symbols?</li><li>Any kind of obfuscation or anti-reversing?
The only blocker in the above questions is if we have no access to the premium binary. Maybe the URL to download it is tucked somewhere inside the trial binary. If not, too bad, find something else.</li></ul><p>I’d also stop as soon as I found that the app has anti-reversing or serious obfuscation. I’d really like to have fun and not spend the good part of a year for a single app. I’m not a good reverser anyway and I don’t want to be - these people are scary.</p><p>Another part of my cracking adventure is developing the “perfect crack”. The one that tinkers the app the least and allows me to maintain it across versions. I don’t want just to patch a DLL. It’s dirty. We’ll see better techniques further down.</p><h1 id="first-impressions">First impressions</h1><p>Play a bit around with the software see what it does. Identify useful strings (like<code>Trial</code> or<code>Expires</code>) inside the app so you’ve got stuff to search.</p><p>How does it behave if you give it a wrong serial number? If you disable the internet? Where does it store license stuff? Maybe in the registry? Are there any interesting keys in there? If the license is stored in a file, poke it. Is it encrypted? Signed? Has a checksum?</p><p>At this point there are no wrong directions. Poke the program and start building confidence in the app. What it means to run correctly. You should crash the app at least once. Don’t be afraid, you can just re-install it.</p><h1 id="network-inspection">Network inspection</h1><p>Fire up Burp and pass the whole VM traffic through it (you’re using a VM right? RIIIIGHT???)</p><p>Identify the URLs and check for SSL pinning. Then install Burp’s root cert in the VM and check again.</p><p>If it’s SSL pinned bypassing it shouldn’t be that hard (we’ll see some examples later)</p><p>Right now you’re looking for the following:</p><ul><li>Does the serial number get sent to the backend?</li><li>If yes, check the responses of correct and incorrect license numbers</li><li>If not, check for kinda weird-looking strings, encrypted strings and signatures. Maybe the license is used to generate another string to obfuscate it over the wire
There’s a pretty good chance that right now you’ve found already a solid entrypoint. The app sends some computer based fingerprint with the license key to the licensing server and expects a structured response that describes the kind of license that we have.</li></ul><p>In my experience following this route has not been fruitful. In all of such encounters the request and response are signed and sometimes even encrypted. But the most problematic aspect is identifying the required structure that the app expects. Instead of<code>22-dec-2022</code> that the expiration date is set you try<code>22-dec-2032</code> - after bypassing the signature check of course. But for some reason it doesn’t work - data are encoded elsewhere as well? Maybe if you change<code>trial</code> to<code>premium</code>? Or to<code>ultimate</code>? Why are there both strings inside the app? Is that case sensitive?</p><p>These might seem like easy problems but, let me tell you, they’re definitely not. Compilers have gone mental with optimization and understanding a C++ object through reversing is it’s own mountain. How would you know that<code>ultimate</code> needs a<code>is_network_license</code> to false - while<code>trial</code> does not?</p><p>From all the programs that I’ve cracked, I’ve never found one that does a “simple enough” network call to check the license. They all use some kind of licensing solution that has signatures and encryptions n stuff that make network-based cracking as hard as “regular” cracking (hooking/patching n stuff).</p><p>So now what?</p><h1 id="dynamic-instrumentation---native-apps">Dynamic Instrumentation - Native apps</h1><p>Let me introduce you to the amazing world of: 🌈<a href="https://frida.re">frida</a>🌈</p><p>It’s a stupidly powerful dynamic instrumentation framework, mainly targeting mobile apps but it works great on all Desktop OSes as well. Think of it like Inspect Element for native apps.</p><p>It works by injecting a JavaScript Engine inside the target process. That essentially allows you to inject or even replace native function with JavaScript code. Here for example we hook the debugging output the target app runs:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-JavaScript" data-lang="JavaScript"><span style="display:flex;"><span><span style="color:#66d9ef">let</span><span style="color:#a6e22e">OutputDebugStringW_export</span><span style="color:#f92672">=</span><span style="color:#a6e22e">Module</span>.<span style="color:#a6e22e">getExportByName</span>(<span style="color:#e6db74">"kernel32.dll"</span>,<span style="color:#e6db74">"OutputDebugStringW"</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span><span style="color:#a6e22e">OutputDebugStringW_new</span><span style="color:#f92672">=</span><span style="color:#66d9ef">new</span><span style="color:#a6e22e">NativeCallback</span>((<span style="color:#a6e22e">str</span>) => {</span></span><span style="display:flex;"><span><span style="color:#75715e">// Redefine the code executed - yeap, plain javascript.</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#75715e">// `str` is gonna be a pointer as we tell further down.</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#75715e">// As the return type is void, we don't have to return anything</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#75715e">// Since this is a pointer, we can treat it in any way we like. Here we read it as Utf16 - part of the frida API</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">str</span>.<span style="color:#a6e22e">readUtf16String</span>());</span></span><span style="display:flex;"><span> },</span></span><span style="display:flex;"><span><span style="color:#e6db74">"void"</span>,<span style="color:#75715e">// Return type</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> [<span style="color:#e6db74">"pointer"</span> ]<span style="color:#75715e">// Argument list. They will be passed to the above function as regular arguments</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/>);</span></span></code></pre></div><p>The above can then be run as follows:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-JavaScript" data-lang="JavaScript"><span style="display:flex;"><span><span style="color:#a6e22e">frida</span>.<span style="color:#a6e22e">exe</span><span style="color:#f92672">-</span><span style="color:#a6e22e">f</span><span style="color:#a6e22e">MyAwesomeApp</span>.<span style="color:#a6e22e">exe</span><span style="color:#f92672">-</span><span style="color:#a6e22e">l</span><span style="color:#a6e22e">HookDebugStringW</span>.<span style="color:#a6e22e">js</span></span></span></code></pre></div><p>This will spawn the app but you can also hook onto an already running process with<code>-n</code> flag instead of<code>-f</code>. After that you’re thrown into an interactive JS shell that you can enter commands or change the script that is automatically re-applied once it changes on disk. I can’t possibly overstate how powerful this tool is. And it doesn’t stop there!</p><p>The exact reason of why would you hook a debug output is not the point. That could be an exported symbol of the program or even one of its DLLs. But what if you just wanna search for a bunch of function names and wanna see if they get called in the specific flow that you’re researching? Enter<code>frida-trace</code>.</p><p>Instead of writing hooks like the above over and over, that tool does most of the job for you and can also pattern match function names. Almost my first command when I start the reversing phase is the following:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-JavaScript" data-lang="JavaScript"><span style="display:flex;"><span><span style="color:#a6e22e">frida</span><span style="color:#f92672">-</span><span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">exe</span><span style="color:#f92672">-</span><span style="color:#a6e22e">n</span><span style="color:#a6e22e">MyAwesomeApp</span>.<span style="color:#a6e22e">exe</span><span style="color:#f92672">-</span><span style="color:#a6e22e">i</span><span style="color:#e6db74">'MyAwesomeApp.exe!*License*'</span></span></span></code></pre></div><p>I run that right before I click some kind of license checking button after I’ve entered the license string and I check to see if any function with a name that matches the pattern<code>*License*</code> (note: case sensitive) inside the module<code>MyAwesomeApp.exe</code> (note: case sensitive as well - many times the module name is in a different case than the file. Use<code>Process.enumerateModulesSync()</code> inside the frida shell) fires up. I’m limiting the search in that module to avoid hooking thousands of functions - which is a very good recipe for an instant crash. You can either make the pattern a bit more targeted and remove the module part or change the module to a spicy named DLL. You can also hook all the functions of a module with<code>-I liblicense_of_MyAwesomeApp.dll</code> but again, if the exports are too many it’ll crash.</p><p>At this point, for the not-so-experienced crackers, I should note that the whole time I’m talking about functions that have exported symbols. If the app has stripped the names of the functions and the function that you’re aiming for is called from inside the module, the aforementioned technique will bear no fruits as there won’t be any functions found to hook. The windows-native functions though (<code>user32.dll</code> or<code>kernel32.dll</code> for example) will always work as those DLLs have well known exports. It’s a very accurate way of finding out the environment variables that the app accepts, WMI queries that it does, registry keys that it uses and maybe even some crypto stuff that it uses to check the license.</p><h1 id="reversing---native-apps">Reversing - Native apps</h1><p>I don’t know what you’re expecting here but I’m not a good reverser. At all. Fire up ghidra and start looking for strings and go back from there. I’ve got one piece of a one-liner though to find spicy DLLs fast:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Bash" data-lang="Bash"><span style="display:flex;"><span>fd . ~/.wine/drive_c/Program<span style="color:#ae81ff">\</span>Files/MyAwesomeApp -H -t f -x sh -c<span style="color:#e6db74">'strings -a -e l "{}" | rg -i "license" &amp;&amp; echo -e "\t>{}"'</span></span></span></code></pre></div><p>What this does is run<code>strings</code>to all the files recursively under<code>~/.wine/...</code> but with a twist: the<code>-e l</code> flag. This makes all the difference. You see Windows like 16 bit little endian characters. But not always. Maybe big endian (<code>-e b</code>) or maybe regular ASCII (no<code>-e</code> flag at all). This note took me a week to find out. Cheers.</p><p>While it’s very tempting, don’t invest much time finding “a single function that if returns true everything is super-premium-ultimate-version”. Nowadays everyone loves object orientation and most often than not a “subtle” change could require huge changes in the object that represents the license. I have however stumbled upon such a marvelously written software!</p><p>It’s one of the most widely used software in its market and: IT’S CLOUD BASED. Yeap. It’s mostly an electron app that loads remote content and I just didn’t even try to crack it for months. “It should load the code that is required for my specific license” I thought. NOP! It had an<code>isUltimate</code> function that when hooked to return<code>true</code>, I was magically Ultimate.</p><p>Most of the other software though weren’t that nice. Even apps that share just a tiny fraction of the market used some kind of licensing solution that as said before has some difficulty - Stripped symbols, encryption, signing, public/private keys and even sometimes statically compiled crypto functions.</p><h2 id="a-word-on-keygens">A word on keygens</h2><p>I think that key generators are the epitome of art in terms of cracking. It’s so slick and not intruding and sometimes quite hard to counter-measure from the perspective of the developer so many times it’s resilient to updates. But it’s hard. Very hard.</p><p>I’ve stumbled upon a C# app that I cracked using a keygen. I found a “magic license key” to put it in offline mode so that it accepts license keys that are checked using some math. But it used some archaic Windows hashing function that was a pain to re-implement and required some very weird math. It was also hidden in plain site - The function<code>CheckLicense</code> was never called (and it also had some even more weird math that took me 3 days to understand that make no actual sense) and the actual function was named something like<code>CalculateOrbitalTrajectory</code>. The only way that I could find that was through dynamic instrumentation.</p><p>On another app I cracked the public DSA-512 public key that it used to verify the license signature. I had already cracked it through hooking but I wanted to completely own it so I cracked the key - I never got to use it tho as it needed some weird transformations and I got bored. Again, the structuring of data is a huge roadblock. Here’s though how I cracked a DSA-512 public key in 2 days (there are MUCH better and faster ways to do it but that’s the only way it worked for me - also I’m bad at cryptanalysis):</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Bash" data-lang="Bash"><span style="display:flex;"><span><span style="color:#75715e"># All the key data have been changed</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># Extract the PEM public key from inside the binary</span></span></span><span style="display:flex;"><span>openssl dsa -pubin -in anotherAwesomeApp_public_key.pem -noout -modulus</span></span><span style="display:flex;"><span>read DSA key</span></span><span style="display:flex;"><span>Public Key<span style="color:#f92672">=</span>2A0ABA86F22281B123F33D9E073AC921C0F2BCB0114C07F632129B64C3CA4181D84C998C2556DC69CB30E0D6B7CB761274AAFC6834FE74D6721E6EA6BCD68DEA</span></span><span style="display:flex;"><span><span style="color:#75715e"># Hex to decimal</span></span></span><span style="display:flex;"><span>$ echo<span style="color:#e6db74">"ibase=16;2A0ABA86F22281B123F33D9E073AC921C0F2BCB0114C07F632129B64C3CA4181D84C998C2556DC69CB30E0D6B7CB761274AAFC6834FE74D6721E6EA6BCD68DEA"</span> | bc</span></span><span style="display:flex;"><span>22019134240820916317814169763607118015464182266127018258054642617293<span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/>88614872096293260765941335270405591230469600688971077042627869124706<span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/><span style="color:#ae81ff">949973008545385962</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e"># And then run [cado-nfs](http://cado-nfs.gforge.inria.fr/) through docker to</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># factor the number (steps from [here](https://www.doyler.net/security-not-included/cracking-256-bit-rsa-keys)):</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>$ docker run -d --name anotherAwesomeApp_public cyrilbouvier/cado-nfs.py<span style="color:#ae81ff">2201913424082091631781416976360711801546418226612701825805464261729388614872096293260765941335270405591230469600688971077042627869124706949973008545385962</span></span></span><span style="display:flex;"><span>$ docker logs -f anotherAwesomeApp_public</span></span><span style="display:flex;"><span>Unable to find image<span style="color:#e6db74">'cyrilbouvier/cado-nfs.py:latest'</span> locally</span></span><span style="display:flex;"><span>latest: Pulling from cyrilbouvier/cado-nfs.py</span></span><span style="display:flex;"><span>43c265008fae: Pull complete</span></span><span style="display:flex;"><span>50baea060b67: Pull complete</span></span><span style="display:flex;"><span>5f3e0aed5ee6: Pull complete</span></span><span style="display:flex;"><span>80c73fc9483b: Pull complete</span></span><span style="display:flex;"><span>Digest: sha256:83513a532bc3cfc09ddc44e9c12b9283ace37736fed29f6259cb2b98a1342ab3</span></span><span style="display:flex;"><span>Status: Downloaded newer image<span style="color:#66d9ef">for</span> cyrilbouvier/cado-nfs.py:latest</span></span><span style="display:flex;"><span>Info:root: Using default parameter file /cado-nfs/share/cado-nfs-2.2.1/factor/params.c155</span></span><span style="display:flex;"><span>Info:root: No database exists yet</span></span><span style="display:flex;"><span>Info:root: Created temporary directory /tmp/cado.gcsugjj0</span></span><span style="display:flex;"><span>Info:Database: Opened connection to database /tmp/cado.gcsugjj0/c155.db</span></span><span style="display:flex;"><span>Info:root: Set tasks.threads<span style="color:#f92672">=</span><span style="color:#ae81ff">6</span> based on detected physical cpus</span></span><span style="display:flex;"><span>Info:root: tasks.polyselect.threads<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span></span></span><span style="display:flex;"><span>Info:root: tasks.sieve.las.threads<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span></span></span><span style="display:flex;"><span>Info:root: slaves.scriptpath is /cado-nfs/bin</span></span><span style="display:flex;"><span>Info:root: Command line parameters: /cado-nfs/bin/cado-nfs.py<span style="color:#ae81ff">2201913424082091631781416976360711801546418226612701825805464261729388614872096293260765941335270405591230469600688971077042627869124706949973008545385962</span></span></span><span style="display:flex;"><span>Info:root: If this computation gets interrupted, it can be resumed with /cado-nfs/bin/cado-nfs.py /tmp/cado.gcsugjj0/c155.parameters_snapshot.0</span></span><span style="display:flex;"><span>Info:Server Launcher: Adding e13824a36734 to whitelist to allow clients on localhost to connect</span></span><span style="display:flex;"><span>Info:HTTP server: Using non-threaded HTTPS server</span></span><span style="display:flex;"><span>Info:HTTP server: Using whitelist: localhost,e13824a36734</span></span><span style="display:flex;"><span>Info:Complete Factorization: Factoring<span style="color:#ae81ff">2201913424082091631781416976360711801546418226612701825805464261729388614872096293260765941335270405591230469600688971077042627869124706949973008545385962</span></span></span><span style="display:flex;"><span>Info:HTTP server: serving at https://e13824a36734:41869<span style="color:#f92672">(</span>0.0.0.0<span style="color:#f92672">)</span></span></span><span style="display:flex;"><span>Info:HTTP server: For debugging purposes, the URL above can be accessed<span style="color:#66d9ef">if</span> the server.only_registered<span style="color:#f92672">=</span>False parameter is added</span></span><span style="display:flex;"><span>Info:HTTP server: You can start additional cado-nfs-client.py scripts with parameters: --server<span style="color:#f92672">=</span>https://e13824a36734:41869 --certsha1<span style="color:#f92672">=</span>313aa0820967f6db061e8fc9cbf2bde7ecdacab5</span></span><span style="display:flex;"><span>Info:HTTP server: If you want to start additional clients, remember to add their hosts to server.whitelist</span></span><span style="display:flex;"><span>Info:Client Launcher: Starting client id localhost on host localhost</span></span><span style="display:flex;"><span>Info:Client Launcher: Starting client id localhost+2 on host localhost</span></span><span style="display:flex;"><span>Info:Client Launcher: Starting client id localhost+3 on host localhost</span></span><span style="display:flex;"><span>Info:Client Launcher: Running clients: localhost+3<span style="color:#f92672">(</span>Host localhost, PID 16<span style="color:#f92672">)</span>, localhost+2<span style="color:#f92672">(</span>Host localhost, PID 14<span style="color:#f92672">)</span>, localhost<span style="color:#f92672">(</span>Host localhost, PID 12<span style="color:#f92672">)</span></span></span><span style="display:flex;"><span>Info:Polynomial Selection<span style="color:#f92672">(</span>size optimized<span style="color:#f92672">)</span>: Starting</span></span><span style="display:flex;"><span>Info:Polynomial Selection<span style="color:#f92672">(</span>size optimized<span style="color:#f92672">)</span>:<span style="color:#ae81ff">0</span> polynomials in queue from previous run</span></span><span style="display:flex;"><span>Info:Polynomial Selection<span style="color:#f92672">(</span>size optimized<span style="color:#f92672">)</span>: Adding workunit c155_polyselect1_0-1000 to database</span></span><span style="display:flex;"><span>Info:Polynomial Selection<span style="color:#f92672">(</span>size optimized<span style="color:#f92672">)</span>: Adding workunit c155_polyselect1_1000-2000 to database</span></span><span style="display:flex;"><span>Info:Polynomial Selection<span style="color:#f92672">(</span>size optimized<span style="color:#f92672">)</span>: Adding workunit c155_polyselect1_2000-3000 to database</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>...</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>Info:Square Root: Starting</span></span><span style="display:flex;"><span>Info:Square Root: Creating file of<span style="color:#f92672">(</span>a,b<span style="color:#f92672">)</span> values</span></span><span style="display:flex;"><span>Info:Square Root: finished</span></span><span style="display:flex;"><span>Info:Square Root: Factors:<span style="color:#ae81ff">2</span><span style="color:#ae81ff">79</span> 104569920747&lt;hidden>8189807<span style="color:#ae81ff">43</span><span style="color:#ae81ff">31</span></span></span><span style="display:flex;"><span>Info:Square Root: Total cpu/real time<span style="color:#66d9ef">for</span> sqrt: 0.02/0.0144372</span></span><span style="display:flex;"><span>Info:Polynomial Selection<span style="color:#f92672">(</span>size optimized<span style="color:#f92672">)</span>: Aggregate statistics:</span></span><span style="display:flex;"><span>Info:Polynomial Selection<span style="color:#f92672">(</span>size optimized<span style="color:#f92672">)</span>: potential collisions: 71168.8</span></span><span style="display:flex;"><span>Info:Polynomial Selection<span style="color:#f92672">(</span>size optimized<span style="color:#f92672">)</span>: raw lognorm<span style="color:#f92672">(</span>nr/min/av/max/std<span style="color:#f92672">)</span>: 72294/45.370/55.413/60.780/0.874</span></span><span style="display:flex;"><span>Info:Polynomial Selection<span style="color:#f92672">(</span>size optimized<span style="color:#f92672">)</span>: optimized lognorm<span style="color:#f92672">(</span>nr/min/av/max/std<span style="color:#f92672">)</span>: 67782/45.250/50.101/56.280/1.689</span></span><span style="display:flex;"><span>Info:Polynomial Selection<span style="color:#f92672">(</span>size optimized<span style="color:#f92672">)</span>:<span style="color:#ae81ff">10</span> best raw logmu:</span></span><span style="display:flex;"><span>Info:Polynomial Selection<span style="color:#f92672">(</span>size optimized<span style="color:#f92672">)</span>:<span style="color:#ae81ff">10</span> best opt logmu:</span></span><span style="display:flex;"><span>Info:Polynomial Selection<span style="color:#f92672">(</span>size optimized<span style="color:#f92672">)</span>: Total time: 49493.9</span></span><span style="display:flex;"><span>Info:Polynomial Selection<span style="color:#f92672">(</span>root optimized<span style="color:#f92672">)</span>: Aggregate statistics:</span></span><span style="display:flex;"><span>Info:Polynomial Selection<span style="color:#f92672">(</span>root optimized<span style="color:#f92672">)</span>: Total time: 4050.98</span></span><span style="display:flex;"><span>Info:Polynomial Selection<span style="color:#f92672">(</span>root optimized<span style="color:#f92672">)</span>: Rootsieve time: 4050.39</span></span><span style="display:flex;"><span>Info:Generate Factor Base: Total cpu/real time<span style="color:#66d9ef">for</span> makefb: 21.54/5.23901</span></span><span style="display:flex;"><span>Info:Generate Free Relations: Total cpu/real time<span style="color:#66d9ef">for</span> freerel: 271.45/44.1077</span></span><span style="display:flex;"><span>Info:Lattice Sieving: Aggregate statistics:</span></span><span style="display:flex;"><span>Info:Lattice Sieving: Total number of relations:<span style="color:#ae81ff">48074999</span></span></span><span style="display:flex;"><span>Info:Lattice Sieving: Average J: 7752.25<span style="color:#66d9ef">for</span><span style="color:#ae81ff">1680511</span> special-q, max bucket fill: 0.732933</span></span><span style="display:flex;"><span>Info:Lattice Sieving: Total CPU time: 2.90978e+06s</span></span><span style="display:flex;"><span>Info:Filtering - Duplicate Removal, splitting pass: Total cpu/real time<span style="color:#66d9ef">for</span> dup1: 104.66/78.7711</span></span><span style="display:flex;"><span>Info:Filtering - Duplicate Removal, splitting pass: Aggregate statistics:</span></span><span style="display:flex;"><span>Info:Filtering - Duplicate Removal, splitting pass: CPU time<span style="color:#66d9ef">for</span> dup1: 78.7s</span></span><span style="display:flex;"><span>Info:Filtering - Duplicate Removal, removal pass: Total cpu/real time<span style="color:#66d9ef">for</span> dup2: 641.15/153.957</span></span><span style="display:flex;"><span>Info:Filtering - Singleton removal: Total cpu/real time<span style="color:#66d9ef">for</span> purge: 427.7/143.297</span></span><span style="display:flex;"><span>Info:Filtering - Merging: Total cpu/real time<span style="color:#66d9ef">for</span> merge: 631.74/620.553</span></span><span style="display:flex;"><span>Info:Filtering - Merging: Total cpu/real time<span style="color:#66d9ef">for</span> replay: 103.78/94.0045</span></span><span style="display:flex;"><span>Info:Linear Algebra: Total cpu/real time<span style="color:#66d9ef">for</span> bwc: 160799/0.000371933</span></span><span style="display:flex;"><span>Info:Linear Algebra: Aggregate statistics:</span></span><span style="display:flex;"><span>Info:Linear Algebra: Krylov: WCT time 18123.13</span></span><span style="display:flex;"><span>Info:Linear Algebra: Lingen CPU time 379.27, WCT time 81.51</span></span><span style="display:flex;"><span>Info:Linear Algebra: Mksol: WCT time 9798.28</span></span><span style="display:flex;"><span>Info:Quadratic Characters: Total cpu/real time<span style="color:#66d9ef">for</span> characters: 78.49/28.6099</span></span><span style="display:flex;"><span>Info:Square Root: Total cpu/real time<span style="color:#66d9ef">for</span> sqrt: 0.02/0.0144372</span></span><span style="display:flex;"><span>Info:HTTP server: Shutting down HTTP server</span></span><span style="display:flex;"><span>Info:Complete Factorization: Total cpu/elapsed time<span style="color:#66d9ef">for</span> entire factorization: 3.12641e+06/720361</span></span><span style="display:flex;"><span>Info:root: Cleaning up computation data in /tmp/cado.06lc2ugg</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span><span style="color:#ae81ff">79</span> 104569920747&lt;hidden>8189807<span style="color:#ae81ff">43</span><span style="color:#ae81ff">31</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e"># Unfortunately that's as far as I got :)</span></span></span></code></pre></div><h1 id="dynamic-instrumentation--reversing---c-apps">Dynamic Instrumentation &amp; Reversing - C# apps</h1><p>One word:<a href="https://github.com/dnSpy/dnSpy">dnSpy</a>. Again, a gift given by gods. Unfortunately frida won’t work with the C# runtime but dnSpy has your back. It fully decompiles the app and is an amazing debugger.</p><p>The exact same principals as above apply but the problem is that the resulting crack can’t be a javascript file and this raises a problem that I’ve been obsessing about for the past two weeks: Crack deployment.</p><p>As I said in the prologue, I like clean cracks that are transparent to the user (can inspect them easily) and are able to be maintained for future proofing. JavaScript is an amazing solution to the above problems (although it has some others of its own) but as frida isn’t available for C#, we can’t use it. Of course we could patch the binary with dnSpy but patched binaries just don’t cut it for me. They’re dirty. We’ll talk about this problem later.</p><h1 id="dynamic-instrumentation--reversing---java-apps">Dynamic Instrumentation &amp; Reversing - Java apps</h1><p>Well here, we’ve got a problem. I was stunned to find out that the main target of frida, the Java VM is actually the mobile Java VM. Frida-ing “Regular” Java, running on Windows and Linux won’t do it. It spits out some errors about some not found classes (that contain the name<code>Zygote</code> which is an Android-y name) and doesn’t work. I was heart broken and at that point I didn’t go any further.</p><p>Of course there’s JadX for reversing, but it doesn’t offer a debugger for desktop apps either. Why does everyone forget that Java runs on desktops, is above me.</p><p>Maybe I’ll come around it and find good tooling around Java, who knows. If you happen to know good tools, leave a comment below</p><h1 id="crack-deployment">Crack deployment</h1><p>As we’re reaching the end of this post (yes, it has one, even if it doesn’t seem like it) I’d like to close with the problem I’ve been burdened for the last two weeks. Let’s say I’ve written some good frida scripts that do their job and I’ve patched a C# DLL as a PoC. Now what? I don’t want to have to run the app through frida and have a statically patched binary! That’s dirty! When the app updates, I’ll have problems. I break the PE’s signature, it’s hard to replicate, it’s hard to explain and it’s not transparent. I’ve found the following solutions till now - unfortunately without a good implementation (yet?):</p><ul><li>Create an AppInit_DLL (for what that is click<a href="https://learn.microsoft.com/en-us/windows/win32/dlls/secure-boot-and-appinit-dlls#about-appinit_dlls">here</a>) that is app-aware so that when<code>MyApp.exe</code> loads<code>user32.dll</code><a href="https://frida.re/docs/gadget/">frida-gadget</a> can be injected or a nicely written Rust dll can be injected. I’ve not seen a tool like this but I’d like to develop one.</li><li>Patch the target exe to include our custom frida-gadget/DLL as a DLL import and load it. This differs than static patching as there’s a single global script to patch all of our cracked exes and the change is almost self-explanatory. When the exe is cracked, it’ll have a<code>libcrack.dll</code> import that does all the hooking job. Simple and clean - with an asterisk though as that change breaks the PE’s signature, something that I’ve got no idea how big of a problem is. I’ve tried using the<a href="https://lief-project.github.io/doc/stable/tutorials/06_pe_hooking.html">LIEF</a> python library but I wasn’t able to run the exe after patching successfully after<a href="https://lief-project.github.io/doc/stable/tutorials/09_frida_lief.html">injecting the frida-gadget library</a> - I’ve even opened an<a href="https://github.com/lief-project/LIEF/issues/777">issue about it</a></li><li>Maybe find DLLs that the app optionally searches for and if found load them? That’s too app-specific though and prone to break across updates (maybe it requires different exports or it changes the program behavior in a way that we don’t like).</li><li>??? - please comment if you have a good idea</li></ul><h1 id="closing">Closing</h1><p>I still don’t get why companies charge such a stupid amount of money for their software when we’re talking about hobbyist clients. It’s a win-win. You’ll never make a 50k$/year sale to that person but if you give it to them for free, it’s almost sure that they’re gonna root for you and advertise you. For free. Also if they land a job around the market you’re in, there’s a pretty good chance that they’ll push the company to buy your software - even for 50k/year.</p><p>Maybe I’m too naive. Maybe I “don’t get business”. Truth is, I’m not good at that “capitalism” game.</p><p>On the other hand, I tend to draw a line on apps that I crack. There are some amazing software that cost something very reasonable and they get regular updates, good communities n stuff. I like to support them if I can.</p><p>In any case, cracking is not that hard, it just requires time. You get to dead ends quite often but it’s not hard to understand what you see. Most times, when I’m stuck I start from a new lead. Eventually everything falls together. Give or take, a month is enough to crack “most” programs (I’m not talking about apps around computer security, such as IDA Pro. I’ve heard it’s a HUGE undertaking).</p></content:encoded></item><item><title>This post is written in Notion</title><link>https://whynot.fail/coding/notion-blog/</link><pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate><guid>https://whynot.fail/coding/notion-blog/</guid><description>&lt;p>I’ve been searching for a way to write blog posts through a beautiful, mobile-friendly interface for almost two years.&lt;/p>
&lt;p>Notion was always a very good answer but the code required to make it work was always keeping me back. But I finally did it, this blog’s content is now fully hosted in Notion&lt;/p>
&lt;p>&lt;img itemprop="thumbnail" src="https://whynot.fail/img/notion-18bdeff6-aa7d-436f-a55b-b8bbdcc9c074-012E6354-B620-4723-B799-772BCB9B01A5.jpeg" alt="Me writing a blog post with vim"/>
&lt;/p>
&lt;h1 id="existing-solutions">Existing solutions&lt;/h1>
&lt;p>There are some UIs built specifically for git enabled static sites like &lt;a href="http://forestry.io">forestry.io&lt;/a> but all of them lack the support for custom pieces of markdown (also known as &lt;a href="https://gohugo.io/content-management/shortcodes/">shortcodes&lt;/a> in the &lt;a href="https://gohugo.io">hugo&lt;/a> world). This makes the actual blog posting experience harder, as your general view of the content is quite different to what the user will consume.&lt;/p></description><content:encoded><p>I’ve been searching for a way to write blog posts through a beautiful, mobile-friendly interface for almost two years.</p><p>Notion was always a very good answer but the code required to make it work was always keeping me back. But I finally did it, this blog’s content is now fully hosted in Notion</p><p><img itemprop="thumbnail" src="/img/notion-18bdeff6-aa7d-436f-a55b-b8bbdcc9c074-012E6354-B620-4723-B799-772BCB9B01A5.jpeg" alt="Me writing a blog post with vim"/></p><h1 id="existing-solutions">Existing solutions</h1><p>There are some UIs built specifically for git enabled static sites like<a href="http://forestry.io">forestry.io</a> but all of them lack the support for custom pieces of markdown (also known as<a href="https://gohugo.io/content-management/shortcodes/">shortcodes</a> in the<a href="https://gohugo.io">hugo</a> world). This makes the actual blog posting experience harder, as your general view of the content is quite different to what the user will consume.</p><p>There are also blog engines such as Wordpress or<a href="http://ghost.org">ghost.org</a> but I didn’t want to manage yet another service, give my data to yet another company or pay yet another subscription.</p><pre tabindex="0"><code class="language-callout" data-lang="callout">💡Ghost is probably a very good solution as it’s something between a CMS and static site generator. I didn’t go that way though</code></pre><p>The last solution was to use<a href="http://Notion.se">Notion.se</a> as a content editor and generate the actual pages with Hugo through a GitHub Action, as I already do. I already use Notion, Hugo and GitHub separately so no new company or technology was needed to get in the way. Just a little bit of python glue to make them kiss</p><h1 id="announcing-notion-markdown">Announcing notion-markdown</h1><p>There are two things that needed to be bridged:</p><ul><li>Notion content → Markdown</li><li>Trigger a blog rebuild when I edit content through Notion<a href="https://github.com/dzervas/notion-markdown">notion-markdown</a> does the first part and does it quite well. It’s a simple python script that needs almost no external dependencies and takes a Notion page that includes a database as an argument. First, it proceeds to write its properties as a JSON object at the start of the target file and then to translate its content blocks to markdown.</li></ul><p>The only thing missing right now (for my needs at least) is gallery support, as it’s a database on its own.</p><p>I’m sure there are a lot of blocks missing but I just don’t use them (mainly weird collection views and external blocks). If you’re missing something, open an issue on GitHub or, even better, open an MR.</p><p>I decided to use the API that notion uses to render its front end in the web interface, as otherwise I’d have to use the extension API and hassle with secret keys etc. I just hope that the front end API does not change without a notice all the time.</p><h1 id="todo">TODO</h1><p>The current state is very pleasant to me and I’m very proud for what it achieves. Maybe in some time I’ll implement the following too, as they would be nice to have:</p><ul><li>Watch the target Notion Collection for changes and trigger the build action</li><li>Short-lived staging environment (maybe with authentication) using the 30’ timeout in GitHub Action runner that builds drafts too</li><li>Trigger staging build at every Notion Collection event</li><li>Support Notion comments (and maybe sync with<a href="http://utteranc.es">utteranc.es</a>?)
That’s all, I’m just too excited to share the news! 🎉</li></ul></content:encoded></item><item><title>Making PCBs at home: Milling the first layer (and why you need it)</title><link>https://whynot.fail/factory/making-pcbs-at-home-milling-the-first-layer/</link><pubDate>Sun, 05 Sep 2021 00:00:00 +0000</pubDate><guid>https://whynot.fail/factory/making-pcbs-at-home-milling-the-first-layer/</guid><description>&lt;p>For the past 5 years I’ve been obsessed about finding a super quick way to make hobby-grade PCBs at home. The race I was looking to win was the “I don’t want to wait 3 weeks being able to do nothing after I remembered that I2C needs in-series resistors”. I want to get my board in my hands in about an hour without doing much.&lt;/p>
&lt;p>And I found the way, but most importantly, I found the workflow. Let me show you!&lt;/p></description><content:encoded><p>For the past 5 years I’ve been obsessed about finding a super quick way to make hobby-grade PCBs at home. The race I was looking to win was the “I don’t want to wait 3 weeks being able to do nothing after I remembered that I2C needs in-series resistors”. I want to get my board in my hands in about an hour without doing much.</p><p>And I found the way, but most importantly, I found the workflow. Let me show you!</p><p>First of all, in case you missed the title, my solution is CNC milling. The upfront cost is quite budget friendly (less than 200 euros), no nasty chemicals are involved and you can safely toss that awfully bad “PCB drill” out the window. The process takes about 30’ of which 5 are manual labor (preparing gcode and toolchanging)</p><h2 id="required-tools">Required tools</h2><p>While not on the “simple” side, the tools that are required are cheap and can sit on your workbench.</p><ul><li>A CNC. Almost any CNC. If you’re a cheap fuck, a CNC 3018 will cut it (I recommend<a href="https://www.sainsmart.com/products/sainsmart-genmitsu-cnc-router-3018-prover-kit">this</a>). The requirements for the CNC are the following:</li><li>Some way to hold the copper clad safely on the CNC - clamps/screws/whatever</li><li>A 60° 0.1mm-0.2mm endmill to mill the traces (I recommend<a href="https://www.banggood.com/Drillpro-10pcs-0_10_20_30_40_5mm-45-Degree-Flat-Bottom-PCB-Engraving-Bit-Blue-NANO-Coated-Carbide-CNC-Router-Tool-p-1421668.html?rmmds=myorder&amp;cur_warehouse=CN&amp;ID=512928">this</a> set of 10 at 0.2mm)</li><li>A 1mm PCB endmill to cut the board and milldrill (called fishtail? I recommend<a href="https://www.banggood.com/10pcs-11_522_53mm-Carbide-End-Mill-Cutter-PCB-Drill-Bits-p-1090388.html?rmmds=myorder&amp;cur_warehouse=CN">this</a> set)</li><li>A set of PCB drill bits bellow 1mm (there are many on bg)</li><li>Some single sided copper clad - just make sure it fits on your CNC (source it locally or through bg)
The CNC costs ~250 euros and the consumables ~30. You can find even cheaper CNCs but the sainsmart is quite common and has a community. It’s bad as it is (you won’t be cutting aluminum anytime soon) so you definitely want some people to help you. CNCing is generally hard - apart from PCBs, PCBs are easy and hassle free.</li></ul><h2 id="software-preparation">Software Preparation</h2><p>You’re gonna need the following software setup and working:</p><ul><li><a href="https://github.com/pcb2gcode/pcb2gcode">pcb2gcode</a> - to generate G-Code from gerbers</li><li><a href="https://github.com/vlachoudis/bCNC/">bCNC</a> - G-Code sender that has autoleveling feature</li><li>The gerbers of the board you wanna make - these should have all the traces on the<strong>BACK</strong> side</li></ul><h2 id="workflow">Workflow</h2><p>The whole idea is the following:</p><ol><li>Create gcode from gerbers after some setup (speeds &amp; feeds). The gcode is split in the following files:</li><li>Load<code>back</code> file on bCNC</li><li>Connect the probe leads to the cutter and the board</li><li>Zero X &amp; Y so that the board fits on the stock and Z roughly 2mm above the board</li><li>Set Z 0 (again) in the origin by going to<code>Probe tab -> Probe</code>, Configure<code>Pos: 0, 0, -3</code> and press<code>Probe</code> button. The spindle will start going down very slowly until it touches the board. Press<code>Z=0</code>.</li><li>Without lifting the Z, go to<code>Autolevel</code> button and press the<code>Zero</code> button with the crosshairs.</li><li>Lift Z to ~5mm and go back to<code>Probe tab -> Autolevel</code></li><li>Start autolevel probing by:</li><li>Start the cut</li><li>After it’s finished, load the<code>drill</code> file WITHOUT saving changes to previous file and WITHOUT deleting the probe mesh (it pops up 2 questions that you should both answer with No) and change the tool</li><li>Go to XY origin, wipe a bit the point under the cutter and do a regular probe to set the tool’s offset and set<code>Z=0</code> after the probe touches</li><li>Start the cut</li><li>Repeat steps 10-12 for milldrill and outline</li><li>Profit!
To avoid breathing all the fiberglass cut you can have a small syringe filled with water and squirt some as the cuts go. It really helps keep everything super clean.</li></ol><p>Another idea is to squirt some WD-40 or cutting fluid during the cut - I haven’t tested it but it sounds pretty good and maybe WD-40 isn’t conductive (so you don’t have to wipe it during probing for tool changes). An idea by<a href="https://incoherency.co.uk/blog/">James</a>.</p><h2 id="configuring-pcb2gcode">Configuring pcb2gcode</h2><p>pcb2gcode requires some configuration to generate correct G-Code for your setup. This can be done either with a gazillion command line flags or through a file, called<code>millproject</code> that has to be on the same directory that the pcb2gcode command is executed. Here is a thoroughly commented<code>millproject</code> for my machine:</p><p><code>millproject</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Plain" data-lang="Plain"><span style="display:flex;"><span># Pcb2GCode settings</span></span><span style="display:flex;"><span>metric=true # Use mm to read the following values (feeds/speeds/etc.), not imperial inches</span></span><span style="display:flex;"><span>metricoutput=true # Same, but for the output</span></span><span style="display:flex;"><span>zero-start=true # Start from 0,0,0</span></span><span style="display:flex;"><span>zsafe=1 # Safety height</span></span><span style="display:flex;"><span>zchange=5 # Height to change a tool - don't over-do it to avoid crushing your Z axis</span></span><span style="display:flex;"><span>software=custom # We're not using Mach or LinuxCNC</span></span><span style="display:flex;"><span>mirror-axis=1 # Mirror the design to X. Required for the back side</span></span><span style="display:flex;"><span># voronoi=1 # (optional) Instead of cutting straight traces, cut the board only in the places that shouldn't connect with each other. Produces very weird boards but it's quite fast and optimal</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span># Milling - Trace engraving</span></span><span style="display:flex;"><span>zwork=-0.07mm # Depth of engraving - did quite a lot of testing and it seems 0.07 is quite consistent</span></span><span style="display:flex;"><span>mill-feed=600 # How fast to go, in mm/min - maybe go a bit faster?</span></span><span style="display:flex;"><span>mill-speed=10000 # How fast to rotate the spindle in RPM</span></span><span style="display:flex;"><span>mill-diameters=0.30mm # Caluclated by pcb_mill_calc.py - 0.30mm for 0.2mm 60 degree endmill</span></span><span style="display:flex;"><span>isolation-width=0.55mm # Space between traces - I recommend higher than 0.5mm to be MUCH easier to sold and avoid bridges</span></span><span style="display:flex;"><span>milling-overlap=20% # How much should the passes to create the isolation width overlap - 20% is good</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span># Drilling</span></span><span style="display:flex;"><span>zdrill=-1.7 # Depth to drill a hole, +0.1mm than the board thickness to have clean holes</span></span><span style="display:flex;"><span>zmilldrill=-1.7 # Same but for milldrill</span></span><span style="display:flex;"><span>drill-side=back # Drill the board from the back side</span></span><span style="display:flex;"><span>drill-feed=25 # Lower Z during drilling at 25mm/s - don't go much higher, CNCs don't like drilling</span></span><span style="display:flex;"><span>drill-speed=10000 # How fast to rotate the spindle in RPM</span></span><span style="display:flex;"><span>drills-available=0.3mm,0.4mm,0.5mm,0.6mm,0.7mm,0.8mm,0.9mm # Available drill diameters - You "should" have all the diameters smaller than your milldrill bit, if you don't have one it will be rounded to the colsest one you have</span></span><span style="display:flex;"><span>milldrill-diameter=1.0mm # Diameter of the milldrill endmill - I suggest 1mm as you have much less toolchanges and it lasts quite long</span></span><span style="display:flex;"><span>min-milldrill-hole-diameter=1.0mm # Minimum diameter to milldrill - should be the same with your milldrill diameter</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span># Outline</span></span><span style="display:flex;"><span>zcut=-1.7 # Depth of cut for the outline</span></span><span style="display:flex;"><span>cut-side=back # Cut the board from the back</span></span><span style="display:flex;"><span>cut-feed=200 # How fast to cut the board in mm/min - can go a LOT faster I think</span></span><span style="display:flex;"><span>cut-vertfeed=25 # How fast to plunge into the board - don't go much higher</span></span><span style="display:flex;"><span>cut-speed=10000 # How fast to run the spindle in RPM</span></span><span style="display:flex;"><span>cut-infeed=0.85 # Do the cutting in multiple passes, 0.85mm each - maybe this isn't needed</span></span><span style="display:flex;"><span>cutter-diameter=1.0mm # Diameter of the cutter - use the milldrill bit</span></span><span style="display:flex;"><span>bridges=4 # Width of each tab to avoid flying PCBs after the outline is done</span></span><span style="display:flex;"><span>bridgesnum=2 # Number of tabs</span></span><span style="display:flex;"><span>zbridges=-1.2 # Z height while cutting tabs, -1.2 will result in 0.4mm tabs - 0.4mm is ok</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span># GRBL shenanigans</span></span><span style="display:flex;"><span># G64 is not supported by GRBL</span></span><span style="display:flex;"><span>nog64=true</span></span><span style="display:flex;"><span># https://github.com/gnea/grbl/issues/290</span></span><span style="display:flex;"><span>nog81=true</span></span><span style="display:flex;"><span>nog91-1=true</span></span></code></pre></div><p>While the engraving bit is lets say 0.2mm, you’re cutting 0.07mm lower than the surface so the resulting cut will have a bigger width than 0.2mm. To calculate the effective width of cut I created a python script:</p><p><code>pcb_mill_calc.py</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span></span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> math</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e"># For an example of angle=60 tip=0.2 and depth=0.1 check: https://www.calculator.net/right-triangle-calculator.html?av=0.1&amp;alphav=60&amp;alphaunit=d&amp;bv=&amp;betav=&amp;betaunit=d&amp;cv=&amp;hv=&amp;areav=&amp;perimeterv=&amp;x=97&amp;y=22</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span><span style="color:#a6e22e">calculate_effective_width</span>(angle, tip, depth<span style="color:#f92672">=</span><span style="color:#ae81ff">0.1</span>):</span></span><span style="display:flex;"><span> rads<span style="color:#f92672">=</span> math<span style="color:#f92672">.</span>radians((<span style="color:#ae81ff">180</span><span style="color:#f92672">-</span>angle)<span style="color:#f92672">/</span><span style="color:#ae81ff">2</span>)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">2</span><span style="color:#f92672">*</span> depth<span style="color:#f92672">/</span> math<span style="color:#f92672">.</span>tan(rads)<span style="color:#f92672">+</span> tip</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__<span style="color:#f92672">==</span><span style="color:#e6db74">"__main__"</span>:</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sys</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> angle<span style="color:#f92672">=</span> float(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">1</span>])</span></span><span style="display:flex;"><span> tip<span style="color:#f92672">=</span> float(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">2</span>])</span></span><span style="display:flex;"><span> depth<span style="color:#f92672">=</span><span style="color:#ae81ff">0.1</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span>:</span></span><span style="display:flex;"><span> depth<span style="color:#f92672">=</span> float(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">3</span>])</span></span><span style="display:flex;"><span><span style="color:#66d9ef">except</span><span style="color:#a6e22e">IndexError</span>:</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pass</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> print(<span style="color:#e6db74">f</span><span style="color:#e6db74">"For the tip with</span><span style="color:#e6db74">{</span>angle<span style="color:#e6db74">}</span><span style="color:#e6db74"> degree angle,</span><span style="color:#e6db74">{</span>tip<span style="color:#e6db74">}</span><span style="color:#e6db74">mm tip and for a</span><span style="color:#e6db74">{</span>depth<span style="color:#e6db74">}</span><span style="color:#e6db74">mm depth of cut, the following effective width should be used:"</span>)</span></span><span style="display:flex;"><span> result<span style="color:#f92672">=</span> calculate_effective_width(angle, tip, depth)</span></span><span style="display:flex;"><span> recommended<span style="color:#f92672">=</span> result<span style="color:#f92672">+</span> (<span style="color:#ae81ff">0.05</span><span style="color:#f92672">-</span> (result<span style="color:#f92672">%</span><span style="color:#ae81ff">0.05</span>))</span></span><span style="display:flex;"><span> print(<span style="color:#e6db74">f</span><span style="color:#e6db74">"</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">{</span>result<span style="color:#e6db74">}</span><span style="color:#e6db74"> -> rounded up to 0.05mm (for best results):</span><span style="color:#e6db74">{</span>round(recommended,<span style="color:#ae81ff">2</span>)<span style="color:#e6db74">}</span><span style="color:#e6db74">"</span>)</span></span></code></pre></div><p>Usage:<code>python3 pcb_mill_calc.py &lt;bit angle> &lt;bit diameter> &lt;depth of cut></code></p><p>For example to for my 60° 0.2mm endmill with<code>zwork</code> 0.07mm:</p><p><code>python3 pcb_mill_calc.py 60 0.2 0.07</code></p><p>And I get the following result:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Plain" data-lang="Plain"><span style="display:flex;"><span>For the tip with 60.0 degree angle, 0.2mm tip and for a 0.07mm depth of cut, the following effective width should be used:</span></span><span style="display:flex;"><span> 0.28082903768654766 -> rounded up to 0.05mm (for best results): 0.3</span></span></code></pre></div><p>Oof, that’s it! That’s the hardest part but it needs to be done only once - you can then copy the file around in projects and tinker it a bit.</p><h2 id="generate-the-g-code">Generate the G-Code</h2><p>The rest is quite easy, execute the following command:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Bash" data-lang="Bash"><span style="display:flex;"><span>mkdir -p /tmp/gcode<span style="color:#f92672">&amp;&amp;</span> pcb2gcode<span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/> --front<span style="color:#e6db74">"/tmp/gerbers/</span><span style="color:#e6db74">${</span>PROJECT<span style="color:#e6db74">}</span><span style="color:#e6db74">-CuTop.gbr"</span><span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/> --front-output<span style="color:#e6db74">"/tmp/gcode/</span><span style="color:#e6db74">${</span>PROJECT<span style="color:#e6db74">}</span><span style="color:#e6db74">-front.ngc"</span><span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/> --back<span style="color:#e6db74">"/tmp/gerbers/</span><span style="color:#e6db74">${</span>PROJECT<span style="color:#e6db74">}</span><span style="color:#e6db74">-CuBottom.gbr"</span><span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/> --back-output<span style="color:#e6db74">"/tmp/gcode/</span><span style="color:#e6db74">${</span>PROJECT<span style="color:#e6db74">}</span><span style="color:#e6db74">-back.ngc"</span><span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/> --drill<span style="color:#e6db74">"/tmp/gerbers/</span><span style="color:#e6db74">${</span>PROJECT<span style="color:#e6db74">}</span><span style="color:#e6db74">.drl"</span><span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/> --drill-output<span style="color:#e6db74">"/tmp/gcode/</span><span style="color:#e6db74">${</span>PROJECT<span style="color:#e6db74">}</span><span style="color:#e6db74">-drill.ngc"</span><span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/> --milldrill-output<span style="color:#e6db74">"/tmp/gcode/</span><span style="color:#e6db74">${</span>PROJECT<span style="color:#e6db74">}</span><span style="color:#e6db74">-milldirll.ngc"</span><span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/> --outline<span style="color:#e6db74">"/tmp/gerbers/</span><span style="color:#e6db74">${</span>PROJECT<span style="color:#e6db74">}</span><span style="color:#e6db74">-EdgeCuts.gbr"</span><span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/> --outline-output<span style="color:#e6db74">"/tmp/gcode/</span><span style="color:#e6db74">${</span>PROJECT<span style="color:#e6db74">}</span><span style="color:#e6db74">-outline.ngc"</span></span></span></code></pre></div><p>It expects gerbers exported by KiCad (due to the<code>CuTop</code> naming convention and the rest) to be under /tmp/gerbers and a variable<code>PROJECT</code> with the name of the KiCad project. If you have indeed a KiCad project, I have an even better command that using<a href="https://github.com/yaqwsx/KiKit">KiKit</a>, generates the gerbers and feeds them to pcb2gcode automatically:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Bash" data-lang="Bash"><span style="display:flex;"><span>export PROJECT<span style="color:#f92672">=</span><span style="color:#e6db74">${</span><span style="color:#66d9ef">$(</span>ls *.kicad_pcb<span style="color:#66d9ef">)</span>%.kicad_pcb<span style="color:#e6db74">}</span><span style="color:#f92672">&amp;&amp;</span><span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/> kikit export gerber<span style="color:#e6db74">"</span><span style="color:#e6db74">${</span>PROJECT<span style="color:#e6db74">}</span><span style="color:#e6db74">.kicad_pcb"</span> /tmp/gerbers<span style="color:#f92672">&amp;&amp;</span><span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/> mkdir -p /tmp/gcode<span style="color:#f92672">&amp;&amp;</span><span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/> pcb2gcode<span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/> --front<span style="color:#e6db74">"/tmp/gerbers/</span><span style="color:#e6db74">${</span>PROJECT<span style="color:#e6db74">}</span><span style="color:#e6db74">-CuTop.gbr"</span><span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/> --front-output<span style="color:#e6db74">"/tmp/gcode/</span><span style="color:#e6db74">${</span>PROJECT<span style="color:#e6db74">}</span><span style="color:#e6db74">-front.ngc"</span><span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/> --back<span style="color:#e6db74">"/tmp/gerbers/</span><span style="color:#e6db74">${</span>PROJECT<span style="color:#e6db74">}</span><span style="color:#e6db74">-CuBottom.gbr"</span><span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/> --back-output<span style="color:#e6db74">"/tmp/gcode/</span><span style="color:#e6db74">${</span>PROJECT<span style="color:#e6db74">}</span><span style="color:#e6db74">-back.ngc"</span><span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/> --drill<span style="color:#e6db74">"/tmp/gerbers/</span><span style="color:#e6db74">${</span>PROJECT<span style="color:#e6db74">}</span><span style="color:#e6db74">.drl"</span><span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/> --drill-output<span style="color:#e6db74">"/tmp/gcode/</span><span style="color:#e6db74">${</span>PROJECT<span style="color:#e6db74">}</span><span style="color:#e6db74">-drill.ngc"</span><span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/> --milldrill-output<span style="color:#e6db74">"/tmp/gcode/</span><span style="color:#e6db74">${</span>PROJECT<span style="color:#e6db74">}</span><span style="color:#e6db74">-milldirll.ngc"</span><span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/> --outline<span style="color:#e6db74">"/tmp/gerbers/</span><span style="color:#e6db74">${</span>PROJECT<span style="color:#e6db74">}</span><span style="color:#e6db74">-EdgeCuts.gbr"</span><span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/> --outline-output<span style="color:#e6db74">"/tmp/gcode/</span><span style="color:#e6db74">${</span>PROJECT<span style="color:#e6db74">}</span><span style="color:#e6db74">-outline.ngc"</span></span></span></code></pre></div><p>Continue to Step 2 from Workflow and you’ll be done in minutes!</p><h2 id="the-end">The End</h2><p>This was quite a journey for me and it took me about 2 years to finish this workflow. Takes about 30’ to make a small board, it’s almost free. The cutters don’t wear much, copper clads are dirt cheap and widely available even in local stores. The boards turn out amazingly well with almost no post-processing required - maybe some flying copper hair.</p><p>I’m already preparing the workflow for a double sided PCB workflow, most probably using a spindle camera (it’s cheap, don’t freak out). Stay tuned.</p><p>What I haven’t figured out is how to apply solder mask. It needs a weird spring-loaded tool that is able to remove 0.01-0.02 material. If you have any cool ideas, leave a comment!</p><h2 id="alternative-pcb-making-methods">Alternative PCB making methods</h2><p>This is a list on ways to make PCBs at home and why I chose milling over everything else:</p><ul><li>Toner transfer with iron</li><li>Plotter marker (have a plotter with a permanent marker on bare copper clad, there’s an awesome guide by Stavros<a href="https://www.stavros.io/posts/make-pcbs-at-home/">here</a>)</li><li>Laser engraver (Photosensitive board that is marked by the laser)</li><li>CNC Milling</li></ul><h2 id="troubleshooting">Troubleshooting</h2><p>I wanna keep this section up-to-date with problems that I stumble upon. If you have any problems, even machine-specific, please leave a comment.</p><h3 id="even-after-leveling-i-get-uneven-traces-that-are-too-deep-or-shallow">Even after leveling, I get uneven traces that are too deep or shallow</h3><p>First of all, make sure that you didn’t press the small<code>Autolevel</code> button. What this does is apply the autolevel offsets a second time so the result is just like if you hadn’t leveled your workpiece - but from the opposite side</p><p>Then, check that your probe wire doesn’t pick up noise from the motors or spindle. You can check this but doing some movement with your machine and watching if a<code>[P]</code> will randomly show in the machine status. If you have this problem read<a href="https://github.com/gnea/grbl/wiki/Wiring-Limit-Switches">Grbl Wiki</a> on the matter. Based on that I’ve created<a href="https://github.com/dzervas/grbl-optocoupler-ltv846">this</a> board that has 4 optocouplers to isolate the limit switch circuit from the rest of the controller. Worked wanders for me</p></content:encoded></item><item><title>Clear nrf52 saved BT bonds</title><link>https://whynot.fail/notes/clear-nrf52-saved-bt-bonds/</link><pubDate>Wed, 28 Apr 2021 00:00:00 +0000</pubDate><guid>https://whynot.fail/notes/clear-nrf52-saved-bt-bonds/</guid><description>&lt;p>Often the nRF52 micros get stuck or misbehave and reach a weird state with the pairings. Often the solution is just to clear them so here’s adafruit’s code to do that and a &lt;a href="http://platform.io/">platform.io&lt;/a> ini to make it easy.&lt;/p>
&lt;p>&lt;code>platformio.ini&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Bash" data-lang="Bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>env:clearbonds&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>platform &lt;span style="color:#f92672">=&lt;/span> nordicnrf52
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>board &lt;span style="color:#f92672">=&lt;/span> particle_xenon
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>framework &lt;span style="color:#f92672">=&lt;/span> arduino
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The board can be any nrf52 board, it can be any generic board that uses the same chip that you actually have. For example &lt;code>particle_xenon&lt;/code> uses nRF52840, so it can be used for any 52840 board. It might though not flash the correct LEDs, so just hook up the serial port.&lt;/p></description><content:encoded><p>Often the nRF52 micros get stuck or misbehave and reach a weird state with the pairings. Often the solution is just to clear them so here’s adafruit’s code to do that and a<a href="http://platform.io/">platform.io</a> ini to make it easy.</p><p><code>platformio.ini</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Bash" data-lang="Bash"><span style="display:flex;"><span><span style="color:#f92672">[</span>env:clearbonds<span style="color:#f92672">]</span></span></span><span style="display:flex;"><span>platform<span style="color:#f92672">=</span> nordicnrf52</span></span><span style="display:flex;"><span>board<span style="color:#f92672">=</span> particle_xenon</span></span><span style="display:flex;"><span>framework<span style="color:#f92672">=</span> arduino</span></span></code></pre></div><p>The board can be any nrf52 board, it can be any generic board that uses the same chip that you actually have. For example<code>particle_xenon</code> uses nRF52840, so it can be used for any 52840 board. It might though not flash the correct LEDs, so just hook up the serial port.</p><p><code>src/main.cpp</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C++" data-lang="C++"><span style="display:flex;"><span><span style="color:#75715e">/*********************************************************************</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> This is an example for our nRF52 based Bluefruit LE modules</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> Pick one up today in the adafruit shop!</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> Adafruit invests time and resources providing this open source code,</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> please support Adafruit and open-source hardware by purchasing</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> products from Adafruit!</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> MIT license, check LICENSE for more information</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> All text above, and the splash screen below must be included in</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> any redistribution</span></span></span><span style="display:flex;"><span><span style="color:#75715e">*********************************************************************/</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">/* This sketch remove the folder that contains the bonding information</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * used by Bluefruit which is "/adafruit/bond"</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> */</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;bluefruit.h></span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;utility/bonding.h></span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">setup</span>() {</span></span><span style="display:flex;"><span> Serial.begin(<span style="color:#ae81ff">115200</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> (<span style="color:#f92672">!</span>Serial ) delay(<span style="color:#ae81ff">10</span>);<span style="color:#75715e">// for nrf52840 with native usb</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span> Serial.println(<span style="color:#e6db74">"Bluefruit52 Clear Bonds Example"</span>);</span></span><span style="display:flex;"><span> Serial.println(<span style="color:#e6db74">"-------------------------------</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span>);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> Bluefruit.begin();</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> Serial.println();</span></span><span style="display:flex;"><span> Serial.println(<span style="color:#e6db74">"----- Before -----</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span>);</span></span><span style="display:flex;"><span> bond_print_list(BLE_GAP_ROLE_PERIPH);</span></span><span style="display:flex;"><span> bond_print_list(BLE_GAP_ROLE_CENTRAL);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> Bluefruit.clearBonds();</span></span><span style="display:flex;"><span> Bluefruit.Central.clearBonds();</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> Serial.println();</span></span><span style="display:flex;"><span> Serial.println(<span style="color:#e6db74">"----- After -----</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span>);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> bond_print_list(BLE_GAP_ROLE_PERIPH);</span></span><span style="display:flex;"><span> bond_print_list(BLE_GAP_ROLE_CENTRAL);</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">loop</span>() {</span></span><span style="display:flex;"><span><span style="color:#75715e">// Toggle both LEDs every 1 second</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> digitalToggle(LED_RED);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> delay(<span style="color:#ae81ff">1000</span>);</span></span><span style="display:flex;"><span>}</span></span></code></pre></div></content:encoded></item><item><title>Dry your filaments in the drawer</title><link>https://whynot.fail/factory/filament-drawer/</link><pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate><guid>https://whynot.fail/factory/filament-drawer/</guid><description>&lt;p>This is a weekend project to keep your filaments safe &amp;amp; dry. It’s very easy to rebuild and adapt to your needs with (hopefully) available spare parts.&lt;/p>
&lt;p>After a long term abusive relationship with the 3D printing hobby, where I was brutally murdered several times as described &lt;a href="https://whynot.fail/factory/things-that-went-wrong-with-my-ender-3/">here&lt;/a>, it was finally time to find a good partner and settle down. I bought the Original Prusa MK3S. I can finally print dickbutts using plastic. The printer just works, there’s nothing more to add.&lt;/p></description><content:encoded><p>This is a weekend project to keep your filaments safe &amp; dry. It’s very easy to rebuild and adapt to your needs with (hopefully) available spare parts.</p><p>After a long term abusive relationship with the 3D printing hobby, where I was brutally murdered several times as described<a href="/factory/things-that-went-wrong-with-my-ender-3/">here</a>, it was finally time to find a good partner and settle down. I bought the Original Prusa MK3S. I can finally print dickbutts using plastic. The printer just works, there’s nothing more to add.</p><p><img itemprop="thumbnail" src="/img/notion-3d9cc19b-140e-4739-bb68-731ec40346a9-1a1ff1fb-250b-48bc-a1aa-fe6da47cb05c.jpg" alt="1a1ff1fb-250b-48bc-a1aa-fe6da47cb05c.jpg"/></p><p>Prusa holding a poker face after the Ender 3 told it what it went through</p><p>But getting through so much, I can now fully appreciate my printer and do the best I can to keep it happy and a big part of that is to buy good quality filament (I use Prusament and Devil Design) and keep it dry (around 20% humidity and below 60C, for almost all filaments and materials).</p><h2 id="how-to-keep-the-filament-dry">How to keep the filament dry</h2><p>There are many ready made solutions to keep your filaments dry. Either purpose-built<a href="https://www.printdry.com/">filament dryers</a> or generic vertical food dehydrators to dry a filament before use or after misplacing it inside your pool, but they don’t take care of the permanent/long term storage.</p><p>There are also filament containers, which take care of storage as well. This is the most used type as you just set the target humidity and forget it. Of course there are both<a href="https://www.printdry.com/">ready made</a> storage solutions and<a href="https://blog.prusaprinters.org/dryboxes-and-alternative-spool-holders-not-only-for-multimaterial-upgrade_30525/">DIY</a>.</p><p>Dehydrating filament boils (hehe) down to more or less the following building blocks:</p><ul><li>Moisture absorbers (silica gel, the small non-edible salt packs that you get with electronics)</li><li>Heat - just heat it up and moisture will evaporate</li><li>Dehydrator - no idea how they work, so I’ll market it as “magic boxes that lower humidity”</li><li>(There’s also vacuum that I just learned at the time of writing but not at the time of project planning. More info:<a href="https://www.youtube.com/watch?v=eqQRN9TUw08">https://www.youtube.com/watch?v=eqQRN9TUw08</a>)
I wanted something that integrates with my lab (no random plastic containers here and there) and be dirt cheap with stuff I had around - I had just spent a lot on a new printer and my lab starts to seem like a garbage disposal place from the various random parts I’ve collected over the years for “future projects” - lets make this one of them. So it’s set, I’ll build something on my own.</li></ul><h2 id="what-do-we-have-around">What do we have around</h2><p>The printer was laying on a perfectly sized nightstand and it was a very good fit. The filaments were placed on the first drawer and random prints awaiting use as well as some spare parts were sitting on the second drawer. I just needed to somehow create a controlled climate on the first drawer.</p><p>My target was to use as much “building blocks” as possible (aka have around), so heat &amp; silica gel.</p><p>Silica gel requires no further explanation - as packages from all over the world arrive at your house, you’ll gonna build a big stock of them and never run out.</p><p>For the heat part though, I took an interesting turn: Use the small heatbed I had when I tried to make a<a href="/factory/plastic-v01/">delta printer</a> and then spent thousands in therapy for PTSD.</p><p>The electronics to control the heatbed was the easiest part - I instantly knew I’d use one of the thousands ESP8266 WeMos Minis I had lying around (I had no need for WiFi or the horsepower, but it’s a buck each and I had thousands), with a DHT22 temperature &amp; humidity sensor and probably a screen to have a view on what’s going on</p><p>So the plan was the following:</p><ul><li>Make the temperature/humidity controller using the ESP</li><li>Install the heatbed and wire it to the ESP</li><li>Throw in silica gel bags</li></ul><h2 id="building-the-climate-controller">Building the climate controller</h2><p>For this recipe you’re going to need:</p><ul><li>WeMos Mini</li><li>DHT22 temperature/humidity sensor (the white one, the blue is garbage)</li><li>PCD8544 screen (Nokia 3310 screen)</li><li>Some wire</li><li>(optionally) WeMos Dual Base
Lego time! 🙂</li></ul><p>3 minutes later I had both my debugging and (almost) finalized hardware. Yey!</p><p><img itemprop="thumbnail" src="/img/notion-967a2161-7ba8-4f57-b5f6-f6d3662606b9-6ab1063c-a8a3-4b36-83a0-584a05bed0b2.jpg" alt="6ab1063c-a8a3-4b36-83a0-584a05bed0b2.jpg"/></p><p>Lego for adults</p><p>At this point I should point out that you can use the exact same components but not in “WeMos mini shield” form and use a breadboard, solder on protoboard or even<a href="https://www.stavros.io/posts/make-pcbs-at-home/">make a board with your 3d printer</a>, but I wouldn’t go that way. Just buy a bunch of WeMos shields from aliexpress for a couple of euros each and never go back. It’s fun!</p><p>I should point out that for no apparent reason, my obsession kicked in and I “had” to make a shield for the 5V voltage regulator (I wanted to feed from the same 12V line that I was gonna feed the bed) and a “backpack” shield on the relay that breaks out 2 pins to connect the bed thermistor to. I don’t know why I didn’t use a breadboard. My overengineering could not be tamed.</p><h2 id="programming-the-climate-controller">Programming the climate controller</h2><p>Another cheat mode I used in this project apart from WeMos is<a href="https://esphome.io/">ESPHome</a>. I love this lil fella!</p><p>ESPHome is a firmware for the ESP family that transforms it to an IoT device. It’s the programming equivalent of Lego (TM) for sensor-based projects in YAML. Definitely check it out - it’s easier than you think and it does not need (but is able to talk to) any other home automation services, devices or bridges.</p><p>I say that it’s a cheat as there’s no need for WiFi capability per-se (although it’s nice to watch the humidity on your phone) but I didn’t NOT want it and ESPHome made the whole project much easier and give the ability to program/update it over the air for free (as in beer, freedom, time, the boobs and the rest). Noice.</p><p>The resulting YAML I used (reading the thermistor was a tad tricky and I was stupid enough to lose the forum link that explained it):</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-YAML" data-lang="YAML"><span style="display:flex;"><span><span style="color:#f92672">esphome</span>:</span></span><span style="display:flex;"><span><span style="color:#f92672">name</span>:<span style="color:#ae81ff">filament_drawer</span></span></span><span style="display:flex;"><span><span style="color:#f92672">platform</span>:<span style="color:#ae81ff">ESP8266</span></span></span><span style="display:flex;"><span><span style="color:#f92672">board</span>:<span style="color:#ae81ff">d1_mini</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">wifi</span>:</span></span><span style="display:flex;"><span><span style="color:#f92672">ssid</span>:<span style="color:#e6db74">"Hello"</span></span></span><span style="display:flex;"><span><span style="color:#f92672">password</span>:<span style="color:#e6db74">"*****"</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># Enable fallback hotspot (captive portal) in case wifi connection fails</span></span></span><span style="display:flex;"><span><span style="color:#f92672">ap</span>:</span></span><span style="display:flex;"><span><span style="color:#f92672">ssid</span>:<span style="color:#e6db74">"Filament Drawer Fallback Hotspot"</span></span></span><span style="display:flex;"><span><span style="color:#f92672">password</span>:<span style="color:#e6db74">"**********"</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">captive_portal</span>:</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e"># Enable logging</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># logger:</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e"># Enable Home Assistant API</span></span></span><span style="display:flex;"><span><span style="color:#f92672">api</span>:</span></span><span style="display:flex;"><span><span style="color:#f92672">password</span>:<span style="color:#e6db74">"***"</span></span></span><span style="display:flex;"><span><span style="color:#f92672">ota</span>:</span></span><span style="display:flex;"><span><span style="color:#f92672">password</span>:<span style="color:#e6db74">"***"</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">font</span>:</span></span><span style="display:flex;"><span> -<span style="color:#f92672">file</span>:<span style="color:#e6db74">'slkscr.ttf'</span></span></span><span style="display:flex;"><span><span style="color:#f92672">id</span>:<span style="color:#ae81ff">font1</span></span></span><span style="display:flex;"><span><span style="color:#f92672">size</span>:<span style="color:#ae81ff">8</span></span></span><span style="display:flex;"><span> -<span style="color:#f92672">file</span>:<span style="color:#e6db74">'BebasNeue-Regular.ttf'</span></span></span><span style="display:flex;"><span><span style="color:#f92672">id</span>:<span style="color:#ae81ff">font2</span></span></span><span style="display:flex;"><span><span style="color:#f92672">size</span>:<span style="color:#ae81ff">30</span></span></span><span style="display:flex;"><span> -<span style="color:#f92672">file</span>:<span style="color:#e6db74">'arial.ttf'</span></span></span><span style="display:flex;"><span><span style="color:#f92672">id</span>:<span style="color:#ae81ff">font3</span></span></span><span style="display:flex;"><span><span style="color:#f92672">size</span>:<span style="color:#ae81ff">12</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">sensor</span>:</span></span><span style="display:flex;"><span> -<span style="color:#f92672">platform</span>:<span style="color:#ae81ff">dht</span></span></span><span style="display:flex;"><span><span style="color:#f92672">pin</span>:<span style="color:#ae81ff">D4</span></span></span><span style="display:flex;"><span><span style="color:#f92672">model</span>:<span style="color:#ae81ff">AM2302</span></span></span><span style="display:flex;"><span><span style="color:#f92672">temperature</span>:</span></span><span style="display:flex;"><span><span style="color:#f92672">name</span>:<span style="color:#e6db74">"Filament Drawer Temperature"</span></span></span><span style="display:flex;"><span><span style="color:#f92672">id</span>:<span style="color:#ae81ff">filament_temp</span></span></span><span style="display:flex;"><span><span style="color:#f92672">humidity</span>:</span></span><span style="display:flex;"><span><span style="color:#f92672">name</span>:<span style="color:#e6db74">"Filament Drawer Humidity"</span></span></span><span style="display:flex;"><span><span style="color:#f92672">id</span>:<span style="color:#ae81ff">filament_hum</span></span></span><span style="display:flex;"><span><span style="color:#f92672">update_interval</span>:<span style="color:#ae81ff">1s</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> -<span style="color:#f92672">platform</span>:<span style="color:#ae81ff">ntc</span></span></span><span style="display:flex;"><span><span style="color:#f92672">sensor</span>:<span style="color:#ae81ff">heatbed_sensor</span></span></span><span style="display:flex;"><span><span style="color:#f92672">id</span>:<span style="color:#ae81ff">heatbed_temp</span></span></span><span style="display:flex;"><span><span style="color:#f92672">calibration</span>:</span></span><span style="display:flex;"><span><span style="color:#f92672">b_constant</span>:<span style="color:#ae81ff">3950</span></span></span><span style="display:flex;"><span><span style="color:#f92672">reference_temperature</span>:<span style="color:#ae81ff">25</span><span style="color:#ae81ff">°C</span></span></span><span style="display:flex;"><span><span style="color:#f92672">reference_resistance</span>:<span style="color:#ae81ff">100kOhm</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># - 100kOhm -> 25°C</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># - 1641.9Ohm -> 150°C</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># - 226.15Ohm -> 250°C</span></span></span><span style="display:flex;"><span><span style="color:#f92672">name</span>:<span style="color:#ae81ff">HeatBed Temperature</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> -<span style="color:#f92672">platform</span>:<span style="color:#ae81ff">resistance</span></span></span><span style="display:flex;"><span><span style="color:#f92672">id</span>:<span style="color:#ae81ff">heatbed_sensor</span></span></span><span style="display:flex;"><span><span style="color:#f92672">sensor</span>:<span style="color:#ae81ff">heatbed_source</span></span></span><span style="display:flex;"><span><span style="color:#f92672">configuration</span>:<span style="color:#ae81ff">UPSTREAM</span></span></span><span style="display:flex;"><span><span style="color:#f92672">resistor</span>:<span style="color:#ae81ff">100kOhm</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> -<span style="color:#f92672">platform</span>:<span style="color:#ae81ff">adc</span></span></span><span style="display:flex;"><span><span style="color:#f92672">id</span>:<span style="color:#ae81ff">heatbed_source</span></span></span><span style="display:flex;"><span><span style="color:#f92672">pin</span>:<span style="color:#ae81ff">A0</span></span></span><span style="display:flex;"><span><span style="color:#f92672">update_interval</span>:<span style="color:#ae81ff">never</span></span></span><span style="display:flex;"><span><span style="color:#f92672">filters</span>:</span></span><span style="display:flex;"><span> -<span style="color:#f92672">multiply</span>:<span style="color:#ae81ff">3.3</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">switch</span>:</span></span><span style="display:flex;"><span> -<span style="color:#f92672">platform</span>:<span style="color:#ae81ff">gpio</span></span></span><span style="display:flex;"><span><span style="color:#f92672">pin</span>:<span style="color:#ae81ff">D2</span></span></span><span style="display:flex;"><span><span style="color:#f92672">id</span>:<span style="color:#ae81ff">ntc_vcc</span></span></span><span style="display:flex;"><span><span style="color:#f92672">restore_mode</span>:<span style="color:#ae81ff">ALWAYS_OFF</span></span></span><span style="display:flex;"><span><span style="color:#f92672">internal</span>:<span style="color:#66d9ef">True</span></span></span><span style="display:flex;"><span> -<span style="color:#f92672">platform</span>:<span style="color:#ae81ff">gpio</span></span></span><span style="display:flex;"><span><span style="color:#f92672">pin</span>:<span style="color:#ae81ff">D1</span></span></span><span style="display:flex;"><span><span style="color:#f92672">id</span>:<span style="color:#ae81ff">heatbed_power</span></span></span><span style="display:flex;"><span><span style="color:#f92672">restore_mode</span>:<span style="color:#ae81ff">ALWAYS_OFF</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">interval</span>:</span></span><span style="display:flex;"><span> -<span style="color:#f92672">interval</span>:<span style="color:#ae81ff">0.</span><span style="color:#ae81ff">2s</span></span></span><span style="display:flex;"><span><span style="color:#f92672">then</span>:</span></span><span style="display:flex;"><span> -<span style="color:#f92672">switch.turn_on</span>:<span style="color:#ae81ff">ntc_vcc</span></span></span><span style="display:flex;"><span> -<span style="color:#f92672">component.update</span>:<span style="color:#ae81ff">heatbed_source</span></span></span><span style="display:flex;"><span> -<span style="color:#f92672">switch.turn_off</span>:<span style="color:#ae81ff">ntc_vcc</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> -<span style="color:#f92672">interval</span>:<span style="color:#ae81ff">1s</span></span></span><span style="display:flex;"><span><span style="color:#f92672">then</span>:</span></span><span style="display:flex;"><span> -<span style="color:#f92672">if</span>:</span></span><span style="display:flex;"><span><span style="color:#f92672">condition</span>:</span></span><span style="display:flex;"><span><span style="color:#f92672">lambda</span>:<span style="color:#e6db74">'return id(filament_hum).state > 20 and id(filament_temp).state &lt; 50 and id(filament_temp).state > 5 and id(heatbed_temp).state &lt; 52 and id(heatbed_temp).state > 5;'</span></span></span><span style="display:flex;"><span><span style="color:#f92672">then</span>:</span></span><span style="display:flex;"><span> -<span style="color:#f92672">climate.control</span>:</span></span><span style="display:flex;"><span><span style="color:#f92672">id</span>:<span style="color:#ae81ff">heatbed</span></span></span><span style="display:flex;"><span><span style="color:#f92672">mode</span>:<span style="color:#ae81ff">AUTO</span></span></span><span style="display:flex;"><span><span style="color:#f92672">else</span>:</span></span><span style="display:flex;"><span> -<span style="color:#f92672">climate.control</span>:</span></span><span style="display:flex;"><span><span style="color:#f92672">id</span>:<span style="color:#ae81ff">heatbed</span></span></span><span style="display:flex;"><span><span style="color:#f92672">mode</span>:<span style="color:#e6db74">'OFF'</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">climate</span>:</span></span><span style="display:flex;"><span> -<span style="color:#f92672">platform</span>:<span style="color:#ae81ff">bang_bang</span></span></span><span style="display:flex;"><span><span style="color:#f92672">id</span>:<span style="color:#ae81ff">heatbed</span></span></span><span style="display:flex;"><span><span style="color:#f92672">name</span>:<span style="color:#e6db74">"HeatBed Controller"</span></span></span><span style="display:flex;"><span><span style="color:#f92672">sensor</span>:<span style="color:#ae81ff">heatbed_temp</span></span></span><span style="display:flex;"><span><span style="color:#f92672">default_target_temperature_low</span>:<span style="color:#ae81ff">28.5</span><span style="color:#ae81ff">°C</span></span></span><span style="display:flex;"><span><span style="color:#f92672">default_target_temperature_high</span>:<span style="color:#ae81ff">30</span><span style="color:#ae81ff">°C</span></span></span><span style="display:flex;"><span><span style="color:#f92672">heat_action</span>:</span></span><span style="display:flex;"><span> -<span style="color:#f92672">switch.turn_on</span>:<span style="color:#ae81ff">heatbed_power</span></span></span><span style="display:flex;"><span><span style="color:#f92672">idle_action</span>:</span></span><span style="display:flex;"><span> -<span style="color:#f92672">switch.turn_off</span>:<span style="color:#ae81ff">heatbed_power</span></span></span><span style="display:flex;"><span><span style="color:#f92672">visual</span>:</span></span><span style="display:flex;"><span><span style="color:#f92672">min_temperature</span>:<span style="color:#ae81ff">20</span><span style="color:#ae81ff">°C</span></span></span><span style="display:flex;"><span><span style="color:#f92672">max_temperature</span>:<span style="color:#ae81ff">50</span><span style="color:#ae81ff">°C</span></span></span><span style="display:flex;"><span><span style="color:#f92672">temperature_step</span>:<span style="color:#ae81ff">0.5</span><span style="color:#ae81ff">°C</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">spi</span>:</span></span><span style="display:flex;"><span><span style="color:#f92672">clk_pin</span>:<span style="color:#ae81ff">D5</span></span></span><span style="display:flex;"><span><span style="color:#f92672">mosi_pin</span>:<span style="color:#ae81ff">D7</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">display</span>:</span></span><span style="display:flex;"><span> -<span style="color:#f92672">platform</span>:<span style="color:#ae81ff">pcd8544</span></span></span><span style="display:flex;"><span><span style="color:#f92672">reset_pin</span>:<span style="color:#ae81ff">D0</span></span></span><span style="display:flex;"><span><span style="color:#f92672">cs_pin</span>:<span style="color:#ae81ff">D8</span></span></span><span style="display:flex;"><span><span style="color:#f92672">dc_pin</span>:<span style="color:#ae81ff">D6</span></span></span><span style="display:flex;"><span><span style="color:#f92672">update_interval</span>:<span style="color:#ae81ff">2s</span></span></span><span style="display:flex;"><span><span style="color:#f92672">contrast</span>:<span style="color:#ae81ff">70</span></span></span><span style="display:flex;"><span><span style="color:#f92672">lambda</span>: |-<span style="color:#e6db74"/></span></span><span style="display:flex;"><span><span style="color:#e6db74"> it.printf(18, 0, id(font1), "Filaments");</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> it.printf(14, 4, id(font2), "%.1f%%", id(filament_hum).state);</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> it.printf(0, 34, id(font3), "%.1f°C", id(filament_temp).state);</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> it.printf(42, 34, id(font3), "%.0f°C", id(heatbed_temp).state);</span></span></span></code></pre></div><h2 id="assembly-of-the-drawer">Assembly of the drawer</h2><div class="gallery caption-position-bottom caption-effect-none hover-effect-zoom hover-transition" itemscope= itemtype="http://schema.org/ImageGallery"><p><img itemprop="thumbnail" src="/img/notion-09e94785-fa09-4347-8bbd-ecc6856aeb24-e723c6d6-9461-4a1e-ae5d-52acf73942c5.jpg" alt="e723c6d6-9461-4a1e-ae5d-52acf73942c5.jpg"/></p><p><img itemprop="thumbnail" src="/img/notion-3b851f6f-8fa3-4235-88cb-80633effb17d-97f24523-15f7-4add-a306-7f46df47ae40.jpg" alt="97f24523-15f7-4add-a306-7f46df47ae40.jpg"/></p><p><img itemprop="thumbnail" src="/img/notion-5d0ed16b-8fa4-4300-84fe-c6c407b30ef3-b24a5ecd-920b-4314-9fea-49dcb72508cc.jpg" alt="b24a5ecd-920b-4314-9fea-49dcb72508cc.jpg"/></p><p><img itemprop="thumbnail" src="/img/notion-a7fb896d-7baf-4585-b318-c8da79f18ba3-7196e71f-592e-49e1-93d1-976b3e64cf29.jpg" alt="7196e71f-592e-49e1-93d1-976b3e64cf29.jpg"/></p><p><img itemprop="thumbnail" src="/img/notion-fe766de5-5bed-4e52-9ba5-04c560b71719-7b9dda09-7308-4b9d-bf1c-5fb62611b17a.jpg" alt="7b9dda09-7308-4b9d-bf1c-5fb62611b17a.jpg"/></p><p><img itemprop="thumbnail" src="/img/notion-6ccb8095-fbb1-4a1b-b8fe-4ddabc5577b6-23009cda-d366-4255-b4ab-212602cfb598.jpg" alt="23009cda-d366-4255-b4ab-212602cfb598.jpg"/></p><p><img itemprop="thumbnail" src="/img/notion-f5ce1e36-c504-4ba5-a4fc-118f575cb012-29238800-6b78-42c2-b587-9cd630694019.jpg" alt="29238800-6b78-42c2-b587-9cd630694019.jpg"/></p></div><h2 id="so-did-it-work-how-well">So? Did it work? How well?</h2><p>It actually did! And pretty well! I wouldn’t want to change any humidity controlling related stuff. Here are some numbers and graphs to make you believe me:</p><p><img itemprop="thumbnail" src="/img/notion-50687e23-8810-4bbf-980a-320f1a5d9b98-untitled.png" alt="untitled.png"/></p><p>Yey! Graphs and timelines!</p><p>Above you see that as soon as the heatbed temperature raises (top red) ambient temperature humidity falls (bottom red). Top blue is ambient temperature - must be kept below the glass temperature of the materials inside the drawer - in my case 60C for PLA &amp; PETG.</p><p>What I might fix at some point is to remove the upper wood lip to allow me to sit the filaments vertically - right now they’re sitting horizontally and I can fit 4 of them.</p><p>Another thing I’d like is to swap the relay with a mosfet to avoid that clicking sound - most times I don’t even hear it but it would be neat, and as I’m at it design a proper 12V->5V shield.</p></content:encoded></item><item><title>Things that went wrong with my Ender 3</title><link>https://whynot.fail/factory/things-that-went-wrong-with-my-ender-3/</link><pubDate>Wed, 07 Oct 2020 00:00:00 +0000</pubDate><guid>https://whynot.fail/factory/things-that-went-wrong-with-my-ender-3/</guid><description>&lt;p>Why is it that hard to 3D print across years? Why can’t I have consistent printing experience, while not spending a kidney? I don’t get it. Why is the machine constantly failing? I’m a computer guy, I know that human errors are all over the place but how does a machine break on its own so frequently. And don’t get me wrong, it might be a budget Creality Ender 3 but it’s proven to be a good machine and its components are not majestic. This is me… sad…&lt;/p></description><content:encoded><p>Why is it that hard to 3D print across years? Why can’t I have consistent printing experience, while not spending a kidney? I don’t get it. Why is the machine constantly failing? I’m a computer guy, I know that human errors are all over the place but how does a machine break on its own so frequently. And don’t get me wrong, it might be a budget Creality Ender 3 but it’s proven to be a good machine and its components are not majestic. This is me… sad…</p><p>It’s not often that I’m deeply sad about technology. Most times I’m angry and I do dirty or too opinionated jokes about the subject and I’m feeling better. But at this point, I’m just sad. Today my printer broke again and I have to spent half its cost to fix it. I just want it to do what it was supposed to do, not something else, not hack it, not do it super fast or majestically. I just want to print plastic stuff for fun.</p><p><img itemprop="thumbnail" src="/img/notion-6a0da895-a65b-45fb-85f4-56520a0cbfcc-sad-puppy.jpg" alt="This pupper is too reaching for its plastic toys"/></p><h1 id="a-list-of-things-that-went-wrong">A list of things that went wrong</h1><ol><li>After my first 2 prints, the bed clipper got caught on the right side of the frame, the stepper started skipping and the board was deep fried like a McNugget, one LCD wire was glowing orange for a moment. Result: LCD dead, board resuracted (too many hours)</li><li>Couldn’t get BLTouch clone work with Marlin as it had a bug or something? Result: Countless hours debugging</li><li>Bed mesh generated with BLTouch was not in effect during printing - G28 was ruining it. Result: Countless hours debugging, went to Klipper</li><li>A bit of plastic got into the hotend fan (not the part fan) and it stopped. The hotend overheated and the teflon inside it got too hot. Result: Got to undo the hotend and replace the teflon tube</li><li>My raspberry pi (OctoPi) had some undervoltage problem (while being powered directly from a PC PSU), octopi was lagging and the prints were failing. Results: Many random failed prints, went to a proper x86 full blown server that was hanging around</li><li>BLTouch accuracy is inconsistent - might be 0.03mm might be 0.1mm. Result: Countless hours debugging, never found the culprit. Gonna buy a new one from trianglelabs? I’m not paying ~60E for a probe</li><li>My X gantry was tilted and first 1-2 layers were sometimes a bit off in the back vs front. Result: Bought dual Z system which is not very good</li><li>Extruder started skipping (known Ender 3 plastic extruder problem). Result: Bought an aluminum one</li><li>While the bed mesh was calibrating, BLTouch hit on a clipper and half of it came apart (after the rest of the BLTouch problems). Result: Me sad, continued to work exactly as before, even with the same accuracy</li><li>At some point, the temperature readings started being bonkers. could be constant 5 C (My room is never below 26). Tried several different thermistors, I think the MCU’s pin is problematic. Result: Me absolutely terrified</li><li>After changing server the temperature problem was gone for quite long. But it came back after 2-3 power cycles (printer was unused for 2-3 months), and probably hotend MOSFET got overheated and died - when I turn up the temperature nothing happens, the PSU fan does not get noisy as it did. Result: Me writing this post and probably getting the SKR mini<img itemprop="thumbnail" src="/img/notion-b21fa857-4894-4a13-8ed7-5c529472a979-nuke.jpg" alt="Expected result of my printer in the next 100 hours of tinkering with it. Send help"/></li></ol><h1 id="conclusion">Conclusion</h1><p>After all these, for some reason I still think that Ender 3 is a piece of nice machinery and I suggest to any 3D printing enthusiast to get one. What I do not suggest is getting into 3D printing in the first place. It’s a sad place where your dreams get brutally murdered and your 48 hour long print fails at the last hour or a small fire takes place.</p><p>I got the bug though, so I’ll probably continue to have it as a “hobby” - frightened, anxious and sad. I wish you the best of luck.</p></content:encoded></item><item><title>Rusty Arduino bindings using PlatformIO</title><link>https://whynot.fail/coding/rusty-arduino-bindings/</link><pubDate>Sun, 04 Oct 2020 00:00:00 +0000</pubDate><guid>https://whynot.fail/coding/rusty-arduino-bindings/</guid><description>&lt;p>Oh Rust, how much I love you… Love at &lt;del>first&lt;/del> third sight, like I had with my English teacher. She was ugly but I was 10 and she was a female that stood near me for an hour and talked to me in a soothing voice. That’s what Rust is, ugly but it’s there for you with a soothing voice.&lt;/p>
&lt;p>On the other side we have C++ that the Arduino Framework is written on. Classes here and there, mixed with C, requiring a 3 day workshop to understand what’s the “standard” way of blinking a LED - hence the headache of each Arduino library taking the matters on their own hands. I hate reading C++ by the way and don’t know how to write it. That’s why I want to just forget about it and just call it from Rust.&lt;/p></description><content:encoded><p>Oh Rust, how much I love you… Love at<del>first</del> third sight, like I had with my English teacher. She was ugly but I was 10 and she was a female that stood near me for an hour and talked to me in a soothing voice. That’s what Rust is, ugly but it’s there for you with a soothing voice.</p><p>On the other side we have C++ that the Arduino Framework is written on. Classes here and there, mixed with C, requiring a 3 day workshop to understand what’s the “standard” way of blinking a LED - hence the headache of each Arduino library taking the matters on their own hands. I hate reading C++ by the way and don’t know how to write it. That’s why I want to just forget about it and just call it from Rust.</p><p>I’m gonna use<a href="platformio.org/">PlatformIO</a> which is the swiss-army-knife for the Arduino Framework - manages libraries, board definitions, toolchains, flashing… Everything that you’d possibly need to write and deploy code to an MCU. Apart from Rust. pio knows nothing about Rust and was never intended to do so.</p><p>Now lets make those two KISS, run Rust on MCUs while using the Arduino Framework!</p><p>TL;DR: My attempt lives in<a href="https://github.com/dzervas/platformio-arduino-rust">this</a> repo. I failed.</p><h1 id="how-hard-can-that-be">HOw hArD CAn tHAT bE?</h1><p><img itemprop="thumbnail" src="/img/notion-036af48e-5c24-4f00-9731-dd46917367a8-how-hard-can-that-be.jpg" alt="Me explaining why C++ is so great"/></p><p>What I want to achieve is to be able to call<code>digitalRead</code> and<code>Serial.println</code> from Rust code that will run on my NRF52. I choose the NRF52 cause I want to build a Bluetooth keyboard with it and Rust has official<a href="https://forge.rust-lang.org/release/platform-support.html#tier-2">Tier 2</a> support for it, unlike XTensa (ESP32/8266) and AVR (ATMega/ATTiny).</p><p>First of all, let’s lay down some ground rules on HOW I am willing to achieve that:</p><ul><li>I’m not re-writing Arduino code - I’m not gonna implement the whole standard library, I have a life to live as well</li><li>I’m not re-writing Rust<code>std - see above</code></li><li>Automatic binding creation with<a href="https://github.com/rust-lang/rust-bindgen">bindgen</a> - I won’t write a different crate for each and every target</li><li>At least some basic support for some 3rd party Arduino libraries - such as the<a href="https://github.com/adafruit/Adafruit_nRF52_Arduino/tree/master/libraries/Bluefruit52Lib">BlueFruit</a> that gives me all the core Bluetooth functionality for the NRF52 and is very well maintained</li><li>Minimum boilerplate so that all this work does not remain a “Blink.rs”</li><li>Support for targets other than NRF52 with not too much effort</li><li>Usage of PlatformIO - the only “good enough” build system for the Arduino framework
Ugh… That’s not gonna take a weekend, I was sure even when I started this, but I had no idea how the lack of compiler/linker knowledge would hit me. I should have known that a project exclusively around compiler &amp; linkers will hit hard.</li></ul><p>The plan to achieve the above was hella abstract:</p><ol><li>Generate Rust headers with<a href="https://github.com/rust-lang/rust-bindgen">bindgen</a></li><li>Write a blinky in Rust</li><li>Compile the rest of the Arduino framework</li><li>Compile Rust to an object file</li><li>Link the above two together</li><li>Get the firmware</li><li>Profit</li></ol><h1 id="aaaaaaand-action">Aaaaaaand ACTION</h1><p>Bindgen kinda compiles the header that you pass to it with LVM and generates Rust headers. It’s a marvelous project, but it might miss something. Unless of course it’s C++ code. Then it trips like an LSD overdose.</p><p><img itemprop="thumbnail" src="/img/notion-9c2cf1c9-9633-4843-9aa2-fa6309ebd0df-1-m9slyvmopbkne3qmx7xfsa.jpeg" alt="Bindgen trying to understand why there are globals and classess in a header"/></p><p>After some time around though, I got it, I just passed almost all of the compiler flags that platformio was passing to gcc directly to<a href="https://github.com/rust-lang/rust-bindgen">bindgen</a>. It kiiiiinda worked, in a weird way. WIN!</p><p>Writing a Rust blinky was easy (the code is<a href="https://github.com/dzervas/platformio-arduino-rust/blob/master/src/lib.rs">here</a>). WIN!</p><p>Platformio compiles the whole framework when you give it empty source code (main.c). WIN!</p><p>I copy-pasted the link command that platformio was using and I added Rust’s compiled object file (which can be done using<a href="https://github.com/dzervas/platformio-arduino-rust/blob/master/.cargo/config#L5">this</a> option). And it worked! WIN!</p><p>I got the firmware! I WIN! Profit!</p><p>I flashed the firmware and actually, the LED blinked. I was excited as fuck. Somewhere at this point I started writing this post and I’d mark it as build: passing, but then…</p><h1 id="doing-all-these-at-once">Doing all these at once</h1><p>There’s a reason that I don’t have exact commands of the above steps so everyone can happily write Rust on their little fella. First of all, it’s been almost 2 months that I haven’t touched the project or this draft so I have no idea what I actually did. Second, this did not turn out as a win. While I can blink a LED, there’s almost nothing else I can do.</p><p>I started fumbling with platformio to incorporate bindgen execution, Rust compilation and final code linking with just a<code>platformio run</code>. Then I met<a href="https://scons.org/">SCons</a>. SCons is the build system that platformio uses to put all these bits and pieces together: toolchains, frameworks, compilers, linkers, linker scripts, source code, header files, etc. I tried to manually change variables, redefine functions, and all the good monkey patching that Python can do but it was a dead end. My brain stack pointer was always overflowing, I just couldn’t follow what was done where and why. Nevertheless, I kinda<a href="https://github.com/dzervas/platformio-arduino-rust/blob/master/cargo_build.py">did it</a>. Didn’t have a good time though.</p><p>I could build blinky with one command, good.</p><p><img itemprop="thumbnail" src="/img/notion-5251afc5-a42d-431f-8189-b0a920481c70-happy-fireworks.jpeg" alt="Too soon…"/></p><h1 id="doing-something-usefull">Doing something usefull</h1><p>Print “Hello World”. Nope. Never. Not a chance. I needed somehow to export the<code>Serial</code> object from C++ to Rust and call<code>Serial.println</code>. After hours and hours of reading the headers and the source of the Arduino Framework and trying different options to bindgen, I could not do that. Required huge amount of effort.</p><p>Any useful API in Arduino is a C++ class so if I wanted to overcome this, I had to write everything from the ground. That’s when I tossed the project.</p><h1 id="conclusion">Conclusion</h1><p>I don’t get why C/C++ build systems are so complex. I definitely lack deep knowledge, especially in C++, but come on… This is just too much. Even the Makefiles of a project bigger than 1k SLOC don’t make any sense and you need a manual to understand where anything takes place and why it’s done. It’s a shame.</p><p>About the C++ vs bindgen fight, there’s not much to tell, I don’t think that there will be a time where bindgen will be able to handle the code that I read. It’s too complex, it’s too human.</p><p>Also there are other solutions to write Rust on an MCU instead of this bad idea:</p><ul><li><a href="https://rust-embedded.github.io/">Rust Embedded</a> - lacks USB stack for nrf52 and the BLE stack is on it’s very early steps</li><li><a href="https://mynewt.apache.org/latest/tutorials/other/rust.html">MyNewt Rust bindings</a></li><li>FreeRTOS Rust bindings - I don’t see much development and I’m very sceptic</li></ul></content:encoded></item><item><title>Adding more magic to the Magicforce 68</title><link>https://whynot.fail/hardware/magicforce-68-reversing/</link><pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate><guid>https://whynot.fail/hardware/magicforce-68-reversing/</guid><description>&lt;p>This is a small journey on how I reverse engineered the &lt;a href="https://drop.com/buy/magicforce-68-key-mini-mechanical-keyboard">MagicForce 68&lt;/a> keyboard and tried to add bluetooth functionality to it. It’s a small keyboard (68 keys, 65%) and is USB-only (it’s not the smart model). It has a controller that I can’t flash with a custom firmware, so I had to hook wires on it.&lt;/p>
&lt;h1 id="the-hardware">The Hardware&lt;/h1>
&lt;p>The first step in determining what I was against, was to at least partially disassemble the keyboard.&lt;/p></description><content:encoded><p>This is a small journey on how I reverse engineered the<a href="https://drop.com/buy/magicforce-68-key-mini-mechanical-keyboard">MagicForce 68</a> keyboard and tried to add bluetooth functionality to it. It’s a small keyboard (68 keys, 65%) and is USB-only (it’s not the smart model). It has a controller that I can’t flash with a custom firmware, so I had to hook wires on it.</p><h1 id="the-hardware">The Hardware</h1><p>The first step in determining what I was against, was to at least partially disassemble the keyboard.</p><p>After the 6 screws under the keyboard and removed, the bottom cover is free and can be carefully removed as well (it has wires to the mini-USB connector board, so beware). The nice red PCB is now ready to be destroyed 😈</p><p><img itemprop="thumbnail" src="/img/notion-02850ebd-21e7-49c5-b0f1-ab7944f74982-magicforce_pcb_back.jpeg" alt="Pretty simple schematic, hackable to the bone"/></p><p>This is what I collected: It uses the<a href="https://www.holtek.com/productdetail?p_p_auth=q0FpqQ4D&amp;p_p_id=productvgpageportlet_WAR_holtekprodportlet&amp;p_p_lifecycle=0&amp;p_p_state=maximized&amp;p_p_mode=view&amp;_productvgpageportlet_WAR_holtekprodportlet_virtualGroupId=318">Holtek HT68FB550</a> MCU -<a href="https://www.holtek.com/documents/10179/116711/HT68FB540_550_560v170.pdf">Datasheet</a> - LQFP48 package</p><p>It exposes in the 5 pin header (bottom left on photo):</p><ul><li><code>VCC</code></li><li><code>GND</code></li><li><code>PA0/TCK1/OCDSDA</code> - Used for debugging</li><li><code>Reset/OCDSCK</code> - Used for debugging &amp; programming</li><li><code>UDN/GPIO0</code> - USB D-, used for programming
Debugging &amp; programming are different procedures, according to the datasheet, they use different pins. But they refer to a “Holtek Writer” as the programmer AND debugger. I could find only the<a href="https://www.holtek.com/e-writerpro">e-WriterPro</a>. Seems fucked up (no docs, too expensive, not gonna work on linux/open source software, etc.).</li></ul><p>It is a classic matrix-diode style keyboard, it gives logical 1 (5V if I remember correct) to rows and reads it from the columns (that way because of the direction of the diodes).</p><p>Matrix to MCU pin mapping (Rows: Top to Bottom, Columns: Left to Rigth):</p><table><thead><tr><th>Pin Description</th><th>Pin</th><th>Name</th></tr></thead><tbody><tr><td>NC</td><td>42</td><td>PgDown, PgUp, Insert</td></tr><tr><td>NC</td><td>46</td><td>Shift…, Up</td></tr><tr><td>NC</td><td>44</td><td>Tab…, Delete</td></tr><tr><td>NC</td><td>43</td><td>`123…</td></tr><tr><td>NC</td><td>47</td><td>Ctr…, Left, Down</td></tr><tr><td>NC</td><td>45</td><td>Caps…, Right</td></tr></tbody></table><table><thead><tr><th>Pin</th><th>Pin Description</th><th>Name</th></tr></thead><tbody><tr><td>10</td><td>NC</td><td>9</td></tr><tr><td>34</td><td>PA0/TCK1/OCDSDA</td><td>Left</td></tr><tr><td>30</td><td>PD5</td><td>4</td></tr><tr><td>14</td><td>PD1</td><td>`</td></tr><tr><td>7</td><td>PE2</td><td>8</td></tr><tr><td>28</td><td>PD3</td><td>2</td></tr><tr><td>29</td><td>PD4</td><td>3</td></tr><tr><td>31</td><td>PD6</td><td>5</td></tr><tr><td>36</td><td>PA2/TP3_1/OSC2</td><td>Delete, Up, Down, Right</td></tr><tr><td>37</td><td>PA3/TCK2</td><td>Backspace, PgDown</td></tr><tr><td>11</td><td>NC</td><td>0</td></tr><tr><td>26</td><td>NC</td><td>=, PgUp</td></tr><tr><td>32</td><td>PD7</td><td>6</td></tr><tr><td>27</td><td>PD2</td><td>1</td></tr><tr><td>33</td><td>PE0/VDDIO</td><td>7</td></tr><tr><td>12</td><td>NC</td><td>-, Insert</td></tr></tbody></table><p>All LEDs have a common cathode on Pin 39 -<code>PA5/SDIA/TP1_0</code> and a common anode to Vcc.</p><p>These are all the data that I gathered. Also, (spoiler) I ended up desoldering all of the switches to create my own keyboard so I got access to the front of the PCB. It’s empty, but it’s VERY time consuming to remove all the buttons so here are some photos:</p><div class="gallery caption-position-bottom caption-effect-none hover-effect-zoom hover-transition" itemscope= itemtype="http://schema.org/ImageGallery"><p><img itemprop="thumbnail" src="/img/notion-39d223bd-81d1-427f-8d38-5377eb7f6b6b-magicforce_pcb_front.jpeg" alt="Full front side of the PCB"/></p><p><img itemprop="thumbnail" src="/img/notion-dcb88106-0e71-470d-9b23-53166b01076f-magicforce_pcb_front_botright.jpeg" alt="Middle bottom - space button"/></p><p><img itemprop="thumbnail" src="/img/notion-64cd4903-fa68-48ab-8ea2-a2e3231bc1e4-magicforce_pcb_front_middle.jpeg" alt="Bottom right - arrows &amp; headers"/></p></div><h1 id="the-hack">The hack</h1><p>Ok, so now we know what we’re up against. But what now?</p><p>The idea begun with my frustration with wires - right, bluetooth. But how?</p><p>I had an<a href="https://www.adafruit.com/product/3406">Adafruit Feather Bluefruit</a> at hand, based on the marvellous<a href="https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF52832">NRF52832</a>. I love the NRF52 family, but after a bit of research I learned that the 52832 does not have USB support and does not have a “CryptoCell”, which means a crypto accelerator which mean no<a href="https://medium.com/rtone-iot-security/deep-dive-into-bluetooth-le-security-d2301d640bfc">BLE Secure Connecttion</a>. The NRF52840 offers all these goodies (while the BLE SC support for arduino is<a href="https://github.com/adafruit/Adafruit_nRF52_Arduino/pull/466">under development</a> at the time of writing) but I had to spend money before even having a PoC. Let’s get to work with the 52832!</p><p>There was a side idea, that apart from the regular bluetooth keyboard functionality to add U2F and/or GPG SmartCard support. So I started searching if anything like this exists</p><ol><li><a href="https://github.com/google/OpenSK">OpenSK</a>: Written in Rust (🎉) but does not support at all the 52832 and Rust support for the NRFs is pretty useless (maybe I’ll revisit this at some point)</li><li><a href="https://docs.qmk.fm/">QMK</a> support for my microcontroller - nope</li><li>Any github project with over 200 commits that is a keyboard implementation for my MCU, preferrably in MicroPython - none</li><li><a href="https://micropython.org/">MicroPython</a> that led me to<a href="/notes/micropython-on-nrf52832-with-openocd/">this</a> and was a no due to the problems with FS &amp; other unsupported features - nope
I was forced to write the whole firmware from scratch in Arduino. Ugh… “Δε γαμιεται…” (roughly translates to “Fuck it…” in Greek). I’ll do it. I’ll hook the rows &amp; columns of the keyboard, connectt them to my MCU and control them. I was sure that the on-board MCU won’t interfere (it did) and it’ll work like a charm (it didn’t) and I’ll throw in an OLED as well (I didn’t). But before that, let’s write &amp; test the firmware. Then I’ll solder wires on the PCB.</li></ol><p><img itemprop="thumbnail" src="/img/notion-d524bfa0-dfcd-41d0-affa-a1088562d18f-test_with_keypad_oled.jpeg" alt="The test setup - the MCU, a keypad &amp; an OLED"/></p><p>There you go,<a href="https://github.com/dzervas/plikter">Plikter</a>. It is comprised of the firmware that runs on the feather and 2 daisy chained shift registers (<a href="https://www.arduino.cc/en/uploads/Tutorial/TI_CD4021.pdf">TI CD4021BE</a>) that read the columns as there are not enough pins on the feather - and of course these are on a custom board whose gerbers you’ll find in the repo - made with a plotter following the etching method described perfectly by<a href="https://www.stavros.io/posts/make-pcbs-at-home/">stavros</a>. Soldering time!</p><div class="gallery caption-position-bottom caption-effect-none hover-effect-zoom hover-transition" itemscope= itemtype="http://schema.org/ImageGallery"><p><img itemprop="thumbnail" src="/img/notion-1be3fb55-f4df-4d56-81c4-3819834b1989-plikter_pcb_finished.jpeg" alt="The Plikter board - just 2 shift registers daisy chained"/></p><p><img itemprop="thumbnail" src="/img/notion-e322ac0b-bf51-462c-bad0-008d37d0143f-plikter_hooks_finished.jpeg" alt="Keyboard hooks bottom - wires from rows to the MCU &amp; columnns to the Plikter board"/></p><p><img itemprop="thumbnail" src="/img/notion-b6972012-61fa-4491-b78d-13f503b41ecb-plikter_hooks_top.jpeg" alt="Keyboard hooks from top"/></p></div><h1 id="the-outcome">The outcome</h1><p>It didn’t work.</p><p>I debugged it and I think that the internal resistors on the ports of the keyboard MCU that were connected to the rows &amp; columns were interfering, but I’m not sure.</p><p>Anyway, I had a (mostly) ready firmware &amp; hardware for a keyboard and I was too frustrated by flying USB wires on my desktop. I made the<a href="https://www.thingiverse.com/thing:3478494">SiCK-68</a>, but that’s a story for another time.</p><p>Hope you had fun!</p></content:encoded></item><item><title>MicroPython on Bluefruit NRF52832 with J-Link and openocd</title><link>https://whynot.fail/notes/micropython-on-nrf52832-with-openocd/</link><pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate><guid>https://whynot.fail/notes/micropython-on-nrf52832-with-openocd/</guid><description>&lt;p>First of all, lets flash Adafruit’s NRF52 bootloader for easier future flashing&lt;/p>
&lt;p>My J-Link was “Broken. No longer used” - or so the JLink tools said (AKA bought from e-bay). So I had to go to &lt;a href="http://openocd.org/">openocd&lt;/a>).&lt;/p>
&lt;p>Connect the J-Link (or any SWD capable debugger supported by openocd - even an FT232 breakout will do) to the target - I have a Bluefruit by Adafruit.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Bash" data-lang="Bash">&lt;span style="display:flex;">&lt;span>pip3 install --user intelhex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd Adafruit_nRF52_Bootloader
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git clone https://github.com/adafruit/Adafruit_nRF52_Bootloader
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git submodule update --init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make BOARD&lt;span style="color:#f92672">=&lt;/span>feather_nrf52832 all
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FIRMWARE&lt;span style="color:#f92672">=&lt;/span>lib/softdevice/s132_nrf52_6.1.1/s132_nrf52_6.1.1_softdevice.hex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo openocd -f board/nordic_nrf52_dk.cfg -c init -c “reset init” -c halt -c “nrf5 mass_erase” -c “program $FIRMWARE verify” -c reset -c exit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FIRMWARE&lt;span style="color:#f92672">=&lt;/span>_build/build-feather_nrf52832/feather_nrf52832_bootloader-0.3.2-28-g79a6a0c-nosd.hex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo openocd -f board/nordic_nrf52_dk.cfg -c init -c “reset init” -c halt -c “program $FIRMWARE verify” -c reset -c exi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code class="language-callout" data-lang="callout">💡**NOTE**: `nrf5` command was missing from my package manager’s `openocd` and I needed to install the git version!
&lt;/code>&lt;/pre>&lt;p>Now the bootloader should be flash and we’re able to flash over serial from now on! Lets flash micropython (I advise not flashing master but a stable tag)&lt;/p></description><content:encoded><p>First of all, lets flash Adafruit’s NRF52 bootloader for easier future flashing</p><p>My J-Link was “Broken. No longer used” - or so the JLink tools said (AKA bought from e-bay). So I had to go to<a href="http://openocd.org/">openocd</a>).</p><p>Connect the J-Link (or any SWD capable debugger supported by openocd - even an FT232 breakout will do) to the target - I have a Bluefruit by Adafruit.</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Bash" data-lang="Bash"><span style="display:flex;"><span>pip3 install --user intelhex</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>cd Adafruit_nRF52_Bootloader</span></span><span style="display:flex;"><span>git clone https://github.com/adafruit/Adafruit_nRF52_Bootloader</span></span><span style="display:flex;"><span>git submodule update --init</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>make BOARD<span style="color:#f92672">=</span>feather_nrf52832 all</span></span><span style="display:flex;"><span>FIRMWARE<span style="color:#f92672">=</span>lib/softdevice/s132_nrf52_6.1.1/s132_nrf52_6.1.1_softdevice.hex</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>sudo openocd -f board/nordic_nrf52_dk.cfg -c init -c “reset init” -c halt -c “nrf5 mass_erase” -c “program $FIRMWARE verify” -c reset -c exit</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>FIRMWARE<span style="color:#f92672">=</span>_build/build-feather_nrf52832/feather_nrf52832_bootloader-0.3.2-28-g79a6a0c-nosd.hex</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>sudo openocd -f board/nordic_nrf52_dk.cfg -c init -c “reset init” -c halt -c “program $FIRMWARE verify” -c reset -c exi</span></span></code></pre></div><pre tabindex="0"><code class="language-callout" data-lang="callout">💡**NOTE**: `nrf5` command was missing from my package manager’s `openocd` and I needed to install the git version!</code></pre><p>Now the bootloader should be flash and we’re able to flash over serial from now on! Lets flash micropython (I advise not flashing master but a stable tag)</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Bash" data-lang="Bash"><span style="display:flex;"><span>git clone https://github.com/micropython/micropython</span></span><span style="display:flex;"><span>cd micropython/ports/nrf</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>./drivers/bluetooth/download_ble_stack.sh</span></span><span style="display:flex;"><span>make BOARD<span style="color:#f92672">=</span>feather52 SD<span style="color:#f92672">=</span>s132 FROZEN_MPY_DIR<span style="color:#f92672">=</span>freeze all</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>pip install --user adafruit-nrfutil</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>adafruit-nrfutil dfu genpkg --dev-type 0x0052 --application build-feather52-s132/firmware.hex firmware.zip</span></span><span style="display:flex;"><span>adafruit-nrfutil dfu serial --package firmware.zip -p /dev/ttyUSB0 -b<span style="color:#ae81ff">115200</span></span></span></code></pre></div><p>Done!</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Bash" data-lang="Bash"><span style="display:flex;"><span>dzervas nrf> miniterm.py --raw /dev/ttyUSB0<span style="color:#ae81ff">115200</span></span></span><span style="display:flex;"><span>--- Miniterm on /dev/ttyUSB0 115200,8,N,1 ---</span></span><span style="display:flex;"><span>--- Quit: Ctrl+<span style="color:#f92672">]</span> | Menu: Ctrl+T | Help: Ctrl+T followed by Ctrl+H ---</span></span><span style="display:flex;"><span>MicroPython v1.12-dirty on 2020-04-23; Bluefruit nRF52 Feather with NRF52832</span></span><span style="display:flex;"><span>Type<span style="color:#e6db74">"help()"</span><span style="color:#66d9ef">for</span> more information.</span></span><span style="display:flex;"><span>>>></span></span></code></pre></div><p>If you want to play with other kind of firmware (Rust/C/whatever) and you have to flash ELF or<code>hex</code> files, here is a little helper (put it on your<code>.bashrc</code> or<code>.zshrc</code>):</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Bash" data-lang="Bash"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> adafruit-nrfutil-hex<span style="color:#f92672">()</span><span style="color:#f92672">{</span></span></span><span style="display:flex;"><span> port<span style="color:#f92672">=</span><span style="color:#e6db74">${</span>1<span style="color:#e6db74">}</span></span></span><span style="display:flex;"><span> file<span style="color:#f92672">=</span><span style="color:#e6db74">${</span>2<span style="color:#e6db74">}</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span><span style="color:#f92672">[</span><span style="color:#e6db74">"</span>$#<span style="color:#e6db74">"</span> -ne<span style="color:#ae81ff">2</span><span style="color:#f92672">]</span>;<span style="color:#66d9ef">then</span></span></span><span style="display:flex;"><span> echo<span style="color:#e6db74">"Usage:</span>$0<span style="color:#e6db74"> &lt;port> &lt;hex_file>"</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">1</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span><span style="color:#f92672">[</span><span style="color:#e6db74">"</span><span style="color:#66d9ef">$(</span>file<span style="color:#e6db74">"</span><span style="color:#e6db74">${</span>file<span style="color:#e6db74">}</span><span style="color:#e6db74">"</span> | cut -d<span style="color:#e6db74">' '</span> -f 2<span style="color:#66d9ef">)</span><span style="color:#e6db74">"</span><span style="color:#f92672">=</span><span style="color:#e6db74">"ELF"</span><span style="color:#f92672">]</span>;<span style="color:#66d9ef">then</span></span></span><span style="display:flex;"><span> echo<span style="color:#e6db74">"[+] Converting ELF file to hex"</span></span></span><span style="display:flex;"><span> objcopy -O ihex<span style="color:#e6db74">"</span><span style="color:#e6db74">${</span>file<span style="color:#e6db74">}</span><span style="color:#e6db74">"</span><span style="color:#e6db74">"</span><span style="color:#e6db74">${</span>file<span style="color:#e6db74">}</span><span style="color:#e6db74">.hex"</span></span></span><span style="display:flex;"><span> file<span style="color:#f92672">=</span><span style="color:#e6db74">"</span><span style="color:#e6db74">${</span>file<span style="color:#e6db74">}</span><span style="color:#e6db74">.hex"</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> echo<span style="color:#e6db74">"[+] Generating package"</span></span></span><span style="display:flex;"><span> adafruit-nrfutil dfu genpkg --dev-type 0x0052 --application<span style="color:#e6db74">"</span><span style="color:#e6db74">${</span>file<span style="color:#e6db74">}</span><span style="color:#e6db74">"</span><span style="color:#e6db74">"</span><span style="color:#e6db74">${</span>file<span style="color:#e6db74">}</span><span style="color:#e6db74">.zip"</span></span></span><span style="display:flex;"><span> echo<span style="color:#e6db74">"[+] Flashing package over UART"</span></span></span><span style="display:flex;"><span> adafruit-nrfutil --verbose dfu serial --package<span style="color:#e6db74">"</span><span style="color:#e6db74">${</span>file<span style="color:#e6db74">}</span><span style="color:#e6db74">.zip"</span> --port<span style="color:#e6db74">"</span><span style="color:#e6db74">${</span>port<span style="color:#e6db74">}</span><span style="color:#e6db74">"</span> --baudrate<span style="color:#ae81ff">115200</span> --singlebank --touch<span style="color:#ae81ff">1200</span></span></span><span style="display:flex;"><span><span style="color:#f92672">}</span></span></span></code></pre></div></content:encoded></item><item><title>Let's Encrypt the house!</title><link>https://whynot.fail/homelab/lets-encrypt-the-house/</link><pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate><guid>https://whynot.fail/homelab/lets-encrypt-the-house/</guid><description>&lt;pre tabindex="0">&lt;code class="language-callout" data-lang="callout">💡This whole setup described is deprecated. Cloudflare offers this whole service for free with a much easier setup and 0 maintenance. Reported by an [HN comment](https://news.ycombinator.com/item?id=22838330) (my handle on HN is ttouch). Don’t use what I describe bellow unless you really have a reason not to use Cloudflare. That’s what this blog is about. Failures 🙂
&lt;/code>&lt;/pre>&lt;p>That’s what my mother always said when I was little. And don’t talk to strangers. And the cold comes from the feet (so never walk barefoot). I never got it. How the hell do you use proper signed certificates in a private network? Why have a house if you can’t walk around barefoot? Anyway…&lt;/p></description><content:encoded><pre tabindex="0"><code class="language-callout" data-lang="callout">💡This whole setup described is deprecated. Cloudflare offers this whole service for free with a much easier setup and 0 maintenance. Reported by an [HN comment](https://news.ycombinator.com/item?id=22838330) (my handle on HN is ttouch). Don’t use what I describe bellow unless you really have a reason not to use Cloudflare. That’s what this blog is about. Failures 🙂</code></pre><p>That’s what my mother always said when I was little. And don’t talk to strangers. And the cold comes from the feet (so never walk barefoot). I never got it. How the hell do you use proper signed certificates in a private network? Why have a house if you can’t walk around barefoot? Anyway…</p><p>This is my trip on using Let’s Encrypt in a homelab setup on a very limited budget. It should be a fire &amp; forget implementation. I don’t want to<code>scp</code> 20 certificates every 3 months but it has to be a secure implementation as well - exposing the internal services to the internet is a no-go.</p><p>A little side note to the readers that are not yet sure why I don’t go to a PKI (aka managing my own CA) solution: That CA can sign ANYTHING, even google.com, so if the CA gets compromised, as long as you don’t notice, you’re on deep shit… That can be solved with the<a href="https://wiki.mozilla.org/CA:NameConstraints">Name Constraints</a> extension (limits the domains that a CA can sign to a certain domain or TLD). But then again, where do you keep it? HSMs are pricey. Even then, will you enter the password every now and then? On which machine? Will it be air-gapped? How do you transfer the CSR? Or maybe you set up your own ACME provider (like<a href="https://github.com/smallstep/certificates">step ca</a> does)? Then you will have to harden the whole machine as it’s not air-gapped…</p><p>Also mobiles no longer trust user provided CAs. Actually they do, but they do so only for the built-in browser &amp; mail client, so you lose any native app that supports your self hosted services (ex. Home Assistant app).</p><h2 id="the-idea">The idea</h2><p>This struck me on a Monday night ~4 A.M. while trying to sleep. I was thinking all the things that I explained above. How? Where? For how long?</p><p>Then<em>poof</em>, out of nowhere: use a whole domain, or a subdomain that points at a DNS server inside my home network, just to prove LE that you own it and use the signed certificates however I like.</p><p><img itemprop="thumbnail" src="/img/notion-37a101bd-4175-4bc9-acb4-563b6ef2505a-the-idea.gif" alt="I miss Futurama so fucking much…"/></p><p>At that point, I thought that this was kinda abusing Let’s Encrypt, but then again, isn’t that how VPCs work now?</p><p>Of course I would have to make my local DNS server “spoof” that domain and make it point to local IP addresses (by hand, can’t trust DHCP clients mess with my certificates…). Well that’s super easy, a DNS server is already running on my network (resolves DHCP hostnames) and I have root access on it (I have an<a href="https://www.pcengines.ch/alix2.htm">Alix2</a>) so if I’m gonna run all of my services on a single server, I can put a wildcard A record (each service will have its own subdomain).</p><p>So I’ll need a dynamic DNS (paid service or if self hosted, yet another moving part). But wait, why set up that shit and not create a VPN tunnel between a random VPS and my server and forward any DNS requests to the VPS to my server over VPN? Bingo! :D</p><h2 id="acme-challenges">ACME challenges</h2><p><img itemprop="thumbnail" src="/img/notion-95a6503a-a5bc-415f-a85b-e1dcc934005a-acme.jpeg" alt="It’s widely known that ACME can be very challenging when it comes to safe tool usage"/></p><p>Let’s Encrypt is a CA that issues certificates for free AND automatically. It’s really amazing. They did the web a better place!</p><p>What they need to know to sign my certificate, is just that I actually own the domain I say I do. Nothing more. But how do I prove such thing?</p><p>They use the ACME protocol to certify that I own the sub/domain I request a certificate for. I have to successfully complete a challenge in order for them to verify it’s me. I won’t get into much details - as I actually don’t know the whole process - but there are 3 available challenges (pick 1):</p><ul><li>HTTP</li><li>DNS</li><li>TLS (I have no idea how this works)
With HTTP:</li></ul><blockquote><p>Let’s Encrypt gives a token to your ACME client, and your ACME client puts a file on your web server at http://&lt;YOUR_DOMAIN>/.well-known/acme-challenge/
(as described<a href="https://letsencrypt.org/docs/challenge-types/#http-01-challenge">here</a>)</p></blockquote><p>With DNS, a TXT record should be hosted containing a random string that LE gave, at a specific subdomain of the subdomain we’re trying to sign (<code>_acme_challenge.&lt;YOUR_SUBDOMAIN>.</code>). The DNS challenge is also the only challenge that has the ability to issue a wildcard certificate (as there’s no way with an HTTP request prove that I’m in control of all of the subdomains, unlike a DNS wildcard record).</p><p>For more info about ACME challenges clap (click/tap)<a href="https://letsencrypt.org/docs/challenge-types/">this</a>.</p><p>Of course nobody wants to move around random strings by hand or create new certificates every 3 months (LE only signs certificate for 3 months max), so there are a bunch of<a href="https://letsencrypt.org/docs/client-options/">ACME clients</a> that handle all that fuss. I’d just have to reload the certificate every 3 months - or just restart the whole service.</p><h2 id="our-setup">Our setup</h2><p>Ok, all this sound good (and a bit complicated) but how will I get the green lock on my plex porn cluster you ask? Let me show you, I answer…</p><p>Stuff we need:</p><ul><li>A domain name (or subdomain) - each service will have its own subdomain. For this example we will use<code>home.whynot.net</code></li><li>A VPS (Google Cloud gives you one for<a href="https://cloud.google.com/free">free</a>)</li><li>An NS record pointing the domain to your VPS</li><li>IPTables rules to redirect any DNS requests from the VPS to acme-dns (will explain bellow)</li><li>A local DNS server pointing<code>&lt;service>.home.whynot.net</code> to the appropriate machine(s)<div class="mermaid">
graph LR;
A((internet)) -->|DNS TXT| B[VPS];
C((internet)) -->|wg0| B;
C ---|wg0| D[server];
D --- E(Docker);
E -->|DNS TXT| F(Docker);
F(acme-dns) -->|53| E;</div><script async= src="https://unpkg.com/mermaid/dist/mermaid.min.js"/></li></ul><div class="mermaid">
sequenceDiagram
  traefik ->> acme: Certificate for wiki.home.whynot.fail
  acme -->> letsencrypt: Certificate for wiki.home.whynot.fail
  letsencrypt -->> acme: [challenge-string]
  acme -->> letsencrypt: do the challenge
  letsencrypt ->> root dns: TXT _acme_challenge.wiki.home.whynot.fail
  root dns ->> letsencrypt: _acme_challenge.wiki.home.whynot.fail NS [VPS]
  letsencrypt ->> VPS: TXT _acme_challenge...
  VPS -->> wg0 (server): DNS request
  wg0 (server) -->> wg0 (client): DNS request
  wg0 (client) -->> home server: DNS request
  home server ->> acme: TXT _acme_challenge...
  acme ->> home server: "TXT . . IN [challenge-string]"
  home server -->> wg0 (client): DNS request
  wg0 (client) -->> wg0 (server): DNS request
  wg0 (server) -->> VPS: DNS request
  VPS -->> letsencrypt: "TXT . . IN [challenge-string]"
  letsencrypt -->> acme: [signed certificate]
acme ->> traefik: key & signed cert for wiki.home.whynot.fail</div><script async= src="https://unpkg.com/mermaid/dist/mermaid.min.js"/><p>This is how the whole thing works. It seems way harder than it actually is (unlike anything else in computer science).</p><p>To the<del>dungeon</del> implementation!</p><h2 id="do-the-thing">Do the thing</h2><p>First of all, let’s create a wireguard VPN tunnel between the VPS and the server. I’m not gonna describe how to do that as Stavros described it very well at his<a href="https://www.stavros.io/posts/how-to-configure-wireguard/">post</a>. Do it and come back, I’ll wait (you don’t need to be able to “access your home LAN”, “just a single connection” is good enough for this setup)</p><p>Now I have a<code>wg0</code> network interface on both machines pointing at each other on a weird subnet over an encrypted tunnel. Good :)</p><p>VPS:<code>192.168.2.1</code></p><p>Local Server:<code>192.168.2.2</code></p><p>Now we need to forward the DNS requests to the local server using iptables rules on the VPS. Of course we’re not gonna write iptables, as the cool kids use<a href="http://ferm.foo-projects.org/">ferm</a> these days…</p><p>Add these at<code>/etc/ferm/ferm.conf</code>:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Plain" data-lang="Plain"><span style="display:flex;"><span>@def $WAN_DEV = eth0;</span></span><span style="display:flex;"><span>@def $WG_DEV = wg0;</span></span><span style="display:flex;"><span>@def $WG_IP = 192.168.2.1;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>@def &amp;PORT_FORWARD($proto, $sport, $dport, $dest) = {</span></span><span style="display:flex;"><span> table nat chain PREROUTING interface $WAN_DEV proto $proto dport $sport DNAT to "$dest:$dport";</span></span><span style="display:flex;"><span> table filter chain FORWARD interface $WAN_DEV outerface $WG_DEV daddr $dest proto $proto dport $dport mod conntrack ctstate NEW ACCEPT;</span></span><span style="display:flex;"><span> table nat chain POSTROUTING outerface $WG_DEV proto $proto dport $dport daddr $dest SNAT to 10.192.192.1;</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>&amp;PORT_FORWARD((tcp udp), 53, 53, 192.168.2.2);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>table filter chain FORWARD mod conntrack ctstate (ESTABLISHED RELATED) ACCEPT;</span></span></code></pre></div><h3 id="a-bit-about-ferm">A bit about ferm</h3><p>This just forwards a port. But let’s dive in a bit cause it took me 3 days to figure it out (for some reason nobody thinks that SNAT is needed)</p><p>First of all, some basic ferm:<code>@def $&lt;name> = &lt;value></code> assigns a variable. Keep in mind that with<code>whoami</code> as the value,<code>whoami</code> is executed and the output is stored as value - that way for example, you can automatically find an interface’s IP or create rules for docker bridges (leaving it for another post).</p><p>We can reference the variables anywhere using the<code>$&lt;name></code> notation.</p><p>Next we have a function definition with<code>@def &amp;&lt;name>([arguments...]) = {&lt;rules}</code>.</p><p>We can call the function with the<code>&amp;&lt;name>([arguments...]);</code> notation.</p><p>Now about the rules. This happens after the above piece of “code” executes:</p><ol><li>The destination address of any packet coming to the external interface at port 53 (tcp or udp) is changed to “192.168.2.2” (so it is forwarded to wg0)</li><li>Allow the forwarding of packets coming from the external interface to port 53 going to wg0 (tcp or udp)</li><li>Change the source address of packets that are going to wg0 to “192.168.2.1” - otherwise wireguard will block the packet as it’s not in the<code>AllowedIPs</code></li><li>(last line) Keep track of what packet has changed addresses and change them back (or do other stuff) when the answer comes back from the acme-dns server</li></ol><h3 id="set-up-acme-dns">Set up acme-dns</h3><p>Well that’s easy - docker. End of story</p><p>Go to the home server and do the following:</p><p>Download<a href="https://raw.githubusercontent.com/joohoi/acme-dns/master/config.cfg">config.cfg</a> for acme-dns to<code>acme-dns.cfg</code>. Configure it as you want (note that anyone that has access to acme-dns’ HTTP API, has the ability to issue a certificate!)</p><p>Now run:<code>docker run --restart=unless-stopped --name acmedns -p 192.168.2.2:53:53 -p 192.168.2.2:53:53/udp -p 127.0.0.1:80:80 -v config.cfg:/etc/acme-dns:ro -v /etc/acme-dns/:/var/lib/acme-dns -d joohoi/acme-dns</code></p><p>Last but not least, let your local DNS server know that<code>&lt;service>.home.whynot.net</code> points to the internal IP address of the local server.</p><p>Done!</p><p>But. Um. Where are the certificates?</p><p>Well that’s on you. You get to decide how/why/when/where the certificates are generated &amp; stored. I went with traefik and will describe it in a next post. Until then, check out acme-dns<a href="https://github.com/joohoi/acme-dns#clients">clients</a> on how to use acme-dns!</p><p><img itemprop="thumbnail" src="/img/notion-5dae38f1-dce5-4ccd-9c8a-3d01334e0295-obama-done.jpeg" alt="obama-done.jpeg"/></p><p>Have fun &amp; stay safe!</p></content:encoded></item><item><title>Rust, let me share your awesomeness with C</title><link>https://whynot.fail/coding/rust-c-api-pain/</link><pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate><guid>https://whynot.fail/coding/rust-c-api-pain/</guid><description>&lt;p>Ahoy reader, this is kinda an open letter. But mostly is my desperation in computer font. Rust why don’t you love me? I read about you, I spent nights and days. I fought the borrow checker monster for you. I learned about lifetimes. And you promised two things: - “Systems” language, close to C - Memory safety&lt;/p>
&lt;p>I just wanna call you via a C binary. I don’t want you to fly. I just wanna love you…&lt;/p></description><content:encoded><p>Ahoy reader, this is kinda an open letter. But mostly is my desperation in computer font. Rust why don’t you love me? I read about you, I spent nights and days. I fought the borrow checker monster for you. I learned about lifetimes. And you promised two things: - “Systems” language, close to C - Memory safety</p><p>I just wanna call you via a C binary. I don’t want you to fly. I just wanna love you…</p><p>But before we get to the chase, lets get to drama. You know how I love backstories (and I’ve been watching How to get away with murder).</p><h2 id="the-story">The story</h2><p>The project that all this happend for is not a new idea to me. It boiled inside me for quite some time. I’m referring to mage I started writing it about 6 months ago, when a friend asked me for a stable tool that is able to listen for TCP shells and have TTY support for his OSCP (that’s a story for another day, for more check out<a href="https://github.com/dzervas/netcatty">netcatty</a>). Of course I stopped whatever (another project) I was doing and started coding. I was currently into Go, so I went with it. As I was writing netcatty, first of all I lost a huge oportunity to name it netkitty which is way better and second I started spiraling out about what I could actually do. Why only TCP? I can do better!</p><p>That’s where mage was born. Mage is a tiny protocol, intended to be encapsulated inside all kinds of transports. HTTP requests, headers, cookies, TCP timestamps, DNS queries etc. What a marvelous idea!</p><p>Remember when post-exploitation toolkits &amp; implants communicated with the C2 over TCP or HTTP? Remember when you could feel the earth shaking every time a meterpreter payload exited the final gateway of a target cause a stray UDP connection to a russian server on port 1337 just opened? Remember when the connection would get killed and your server banned after 5’ you got a shell? Well mage is willing to do its magic to stop this madness.</p><p><img itemprop="thumbnail" src="/img/notion-d0b35ea8-7e06-4ca0-87d8-e9accc2926ef-blue-team-laughing.jpg" alt="The blue team laughing at your windows/meterpreter/reverse_tcp"/></p><p>The idea is that you generate a binary payload (msf or whatever) and you “wrap” it using mage. By wrap I mean that the mage .so (or .dll) would be injected inside the binary and then binary patch all the<code>socket.h</code> (or<code>winsock</code>) calls to use the mage functions (spoiler: “wrapping” is not yet implemented, that’s what this post is about).</p><p>The mage primarilly does the following: - Connect to the C2 (completely ignoring the address that the implant wanted to connect to) over whatever protocol you set up during wrapping - Exchange keys with the server (libsodium) - Start encrypted communication with the server (libsodium)</p><p>Useful features include chunking, very low overhead, support for out-of-order packet reception (and maybe sometime packet retransmission?)</p><p>That’s all good, but I’m still talking about a Go project huh? No…</p><p>As any good project, you have to write it at least twice for it to be good. I think I maybe overdid it and rewrote it too fast.<a href="https://github.com/dzervas/mage">Here</a>. I rewrote it in rust. Rust was a much better fit, as it’s much closer to the system, it doesn’t carry a GC and the overal Rust -<code>insert-lang-here</code> interfacing I THOUGHT was easier. If I only knew…</p><h2 id="the-target">The target</h2><p>As said, wrapping is not ready. Nor any actually useful transports. Right now the protocol, encryption/decryption, multiplexing and thread channels are ready. To start implementing wrapping, I had to create a libC API. All answers led to<code>cbindgen</code>, a very cool project that all it does is generate C headers, but to use it, you need to create a C API!</p><p>The “final” struct that I wanted to export was<code>Connection</code> (see<a href="https://github.com/dzervas/mage/blob/master/src/connection.rs">here</a>):</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Rust" data-lang="Rust"><span style="display:flex;"><span><span style="color:#66d9ef">pub</span><span style="color:#66d9ef">struct</span><span style="color:#a6e22e">Connection</span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">'conn</span><span style="color:#f92672">></span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> id:<span style="color:#66d9ef">u32</span>,</span></span><span style="display:flex;"><span> stream:<span style="color:#a6e22e">Stream</span>,</span></span><span style="display:flex;"><span> reader:<span style="color:#66d9ef">&amp;</span><span style="color:#a6e22e">'conn</span><span style="color:#a6e22e">mut</span><span style="color:#66d9ef">dyn</span> Read,</span></span><span style="display:flex;"><span> writer:<span style="color:#66d9ef">&amp;</span><span style="color:#a6e22e">'conn</span><span style="color:#a6e22e">mut</span><span style="color:#66d9ef">dyn</span> Write,</span></span><span style="display:flex;"><span> channels:<span style="color:#a6e22e">HashMap</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">u8</span>, Vec<span style="color:#f92672">&lt;</span>(Sender<span style="color:#f92672">&lt;</span>Vec<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">u8</span><span style="color:#f92672">>></span>, Receiver<span style="color:#f92672">&lt;</span>Vec<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">u8</span><span style="color:#f92672">>></span>)<span style="color:#f92672">>></span></span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span><span style="color:#66d9ef">impl</span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">'conn</span><span style="color:#f92672">></span> Connection<span style="color:#f92672">&lt;</span><span style="color:#a6e22e">'conn</span><span style="color:#f92672">></span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span><span style="color:#66d9ef">fn</span><span style="color:#a6e22e">new</span>(id:<span style="color:#66d9ef">u32</span>, reader:<span style="color:#66d9ef">&amp;</span><span style="color:#a6e22e">'conn</span><span style="color:#a6e22e">mut</span><span style="color:#66d9ef">impl</span> Read, writer:<span style="color:#66d9ef">&amp;</span><span style="color:#a6e22e">'conn</span><span style="color:#a6e22e">mut</span><span style="color:#66d9ef">impl</span> Write, server:<span style="color:#66d9ef">bool</span>, seed:<span style="color:#66d9ef">&amp;</span>[<span style="color:#66d9ef">u8</span>], remote_key:<span style="color:#66d9ef">&amp;</span>[<span style="color:#66d9ef">u8</span>]) -> Result<span style="color:#f92672">&lt;</span>Self<span style="color:#f92672">></span></span></span><span style="display:flex;"><span><span style="color:#f92672">..</span>.</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span><span style="color:#66d9ef">impl</span> Read<span style="color:#66d9ef">for</span> Connection<span style="color:#f92672">&lt;</span>'_<span style="color:#f92672">></span> {<span style="color:#f92672">..</span>.}</span></span><span style="display:flex;"><span><span style="color:#66d9ef">impl</span> Write<span style="color:#66d9ef">for</span> Connection<span style="color:#f92672">&lt;</span>'_<span style="color:#f92672">></span> {<span style="color:#f92672">..</span>.}</span></span></code></pre></div><p>The C API has to be like that (to be in-place compatible with<code>socket.h</code>):</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Rust" data-lang="Rust"><span style="display:flex;"><span><span style="color:#75715e">#[no_mangle]</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span><span style="color:#66d9ef">unsafe</span><span style="color:#66d9ef">extern</span><span style="color:#e6db74">"C"</span><span style="color:#66d9ef">fn</span><span style="color:#a6e22e">connect</span>(_socket:<span style="color:#a6e22e">c_int</span>, _sockaddr:<span style="color:#f92672">*</span><span style="color:#66d9ef">const</span> c_void, _address_len:<span style="color:#a6e22e">c_void</span>) -><span style="color:#a6e22e">c_int</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#[no_mangle]</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span><span style="color:#66d9ef">unsafe</span><span style="color:#66d9ef">extern</span><span style="color:#e6db74">"C"</span><span style="color:#66d9ef">fn</span><span style="color:#a6e22e">send</span>(_socket:<span style="color:#a6e22e">c_int</span>, msg:<span style="color:#f92672">*</span><span style="color:#66d9ef">const</span> c_void, size:<span style="color:#66d9ef">usize</span>, _flags:<span style="color:#a6e22e">c_int</span>) -><span style="color:#66d9ef">usize</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#[no_mangle]</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span><span style="color:#66d9ef">unsafe</span><span style="color:#66d9ef">extern</span><span style="color:#e6db74">"C"</span><span style="color:#66d9ef">fn</span><span style="color:#a6e22e">recv</span>(_socket:<span style="color:#a6e22e">c_int</span>, msg:<span style="color:#f92672">*</span><span style="color:#66d9ef">mut</span> c_void, size:<span style="color:#66d9ef">usize</span>, _flags:<span style="color:#a6e22e">c_int</span>) -><span style="color:#66d9ef">usize</span></span></span></code></pre></div><p>It does not implement all the<code>socket.h</code> functions, but I started with the most vital ones.</p><p>This is my target, expose<code>connect</code>,<code>send</code> and<code>recv</code> to C and let them handle the whole logic. No mystery threads n’ stuff, it could mess a lot wit AV evasion (while it AV evasion has nothing to do with this project, I shouldn’t make it harder)</p><h2 id="the-problem">The problem</h2><p>The problem that I quickly realized was that there was no way to have a “state”. I couldn’t just pass the<code>Connection</code> struct back &amp; forth, as<code>socket.h</code> does! I have to adhere to the function signatures and if someone messes with my struct in a completely unchecked manner, anything could go wrong.</p><p>So I went on and tried to create a static object holding a<code>Connection</code>, that would be initialized on<code>connect</code>. Oh the horror…</p><p>Rust says that it needs to know the size of<code>Connection</code> at compile time to let me have it as static. That’s not possible. I add a reference, but it can’t live long enough so I go with<code>Box</code>.<code>lazy_static</code> enters the game. No idea what it does, but it solved a problem with static. But introduces another. No mutability. So I add a<code>Mutex</code>.</p><p>Right now we have this:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Rust" data-lang="Rust"><span style="display:flex;"><span>lazy_static! {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">ref</span><span style="color:#66d9ef">CONN</span>:<span style="color:#a6e22e">Mutex</span><span style="color:#f92672">&lt;</span>Option<span style="color:#f92672">&lt;</span>Box<span style="color:#f92672">&lt;</span>Connection<span style="color:#f92672">>>></span><span style="color:#f92672">=</span> Mutex::new(None);</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>Ok, that’s fine. It compiles (nobody knows if this actually works yet). But then starts another rabbit hole. Inside<code>connect</code>, among other stuff I call<code>Connection::new</code>.<code>Connection::new</code> accepts<code>reader: &amp;'conn mut impl Read, writer: &amp;'conn mut impl Write</code>. And these are satisified by a<code>TcpStream</code> and<code>TcpStream.try_clone.unwrap()</code>. Now I can’t borrow these, as they’re inside the function scope.</p><p>This is the problem. I don’t know how to pass<code>TcpStream</code> to a new static<code>Connection</code>. I tried making it static as well,<code>Box</code>ing and<code>Rc</code>ing them. Didn’t fucking work. If anyone can help, please do so…</p><p><img itemprop="thumbnail" src="/img/notion-b2b5a373-c5d0-48ff-a3e2-da9b4bcf101b-code-after-trial-and-error.jpg" alt="My code after all the &ldquo;tries”"/></p><hr><p>I know that you don’t read this type of posts often - or I don’t often read them (ranting due to lack of skill). But this was mainly a rubber duck debugging session for me and it’s one of the very few moments that I’m so stuck, that I’m thinking about abandoning the project. Most times I just get bored or find something new. This is different. I’ve hit a brick wall and can’t find even a really dirty hack around it (even though I hate “hacky” code).</p><p>Happy Hacking!</p></content:encoded></item><item><title>Chinese Factory v0.2 - Plastic À La Crème</title><link>https://whynot.fail/factory/plastic-v02/</link><pubDate>Sun, 20 Oct 2019 00:00:00 +0000</pubDate><guid>https://whynot.fail/factory/plastic-v02/</guid><description>&lt;p>Take a breath, sit back and think: Why the fuck not spend some money instead of endless, painful hours? You don’t have money ok, ok, but what if you… &lt;em>WAIT&lt;/em>. Wow, a new world, 3D printing, ACTUAL 3D printed hollow cubes that I PRINTED. Oh wait, is that smoke?&lt;/p>
&lt;p>Welcome ladies and gentlemen on another miserable and painful part oooooof &lt;em>drumroll&lt;/em> the CHINESE FACTORY!!! Starring: - Tears - Anxiety - A Creality Ender 3 3D Printer kit that I got from gearbest - 1 month waiting - Smokey electronics&lt;/p></description><content:encoded><p>Take a breath, sit back and think: Why the fuck not spend some money instead of endless, painful hours? You don’t have money ok, ok, but what if you…<em>WAIT</em>. Wow, a new world, 3D printing, ACTUAL 3D printed hollow cubes that I PRINTED. Oh wait, is that smoke?</p><p>Welcome ladies and gentlemen on another miserable and painful part oooooof<em>drumroll</em> the CHINESE FACTORY!!! Starring: - Tears - Anxiety - A Creality Ender 3 3D Printer kit that I got from gearbest - 1 month waiting - Smokey electronics</p><hr><p>This time, once again, I thought I knew, that I learned from my mistakes. If you don’t know what I’m talking about, check<a href="/factory/plastic-v01">this</a> out. It was time to buy my first, whole, 3D printer kit. Backed by a very big community, Ender 3 by Creality was a very good shot. Everyone was astonshed by the results that this baby could achieve. Medium printing speed, medium noise, but the object was very nice. I also ordered with it TWO BlTouch clones. Not one (cause I knew), but TWO. Noice.</p><p><img itemprop="thumbnail" src="/img/notion-4288107f-51d9-482a-bc75-cd1d2ada373d-waiting-the-order.gif" alt="Me waiting for a month my order to arrive"/></p><p>I saw a couple youtube videos, just to be sure and get some tips, but the build process was pretty simple. They nagged that it lacked a step or two or a screw, but with my experience on the Rostock Mini and the Prusa i3, I couldn’t even get why they were nagging. I had spares of everything: nuts, bolts, motors, drivers, boards, beds. I was fairly sure that as soon as something goes wrong (cause I was FAIRLY sure about that), I’ll be able to replace it. The device even came pre-flashed! I didn’t even have to fiddle with Marlin! What I was missing all these years…</p><h2 id="first-prints">First prints</h2><p>After I put everything together, I turn on the machine, I select a pre-sliced model and I hit print. AND IT PRINTS. The bed was a bit off. BUT IT PRINTS. I tried not to cry cause that shithole that I called home would flood in an instant and burn my printer.</p><p>Ok, everything works, I level the bed a bit and I fire up Cura for some serious (meh) shit: my first useful model. A little<a href="https://www.thingiverse.com/thing:2912394">ventring</a> to cool the parts all around the hotend. And it prints it smooth as fuck. I just couldn’t believe it… I had a working 3D printer!</p><p><img itemprop="thumbnail" src="/img/notion-96dede82-fcf8-4d67-8c93-0bba9a31f7df-ventring.jpg" alt="Ventring is loading :D"/></p><p>So now, lets mount the BLTouch. I start printing the model, but somehow, I forgot that the silver “ear” of the paper clip holding the bed is open on the left side of the bed. And it gets stuck on the Z axis. And before I know it, the cable connecting the controller to the screen is orange-ish and the controller is smoking a pack of Marlboros…</p><p>I turn off everything, I panic and I’m just staring at the black aluminum brick that I had in front of me…</p><h2 id="the-controller-fix">The Controller Fix</h2><p>I plug the printer again, to see what the damage was: XYZ and the screen were dead. Everything else seemed fine. Thermistors, heaters, extruder, all fine. The screen was completely optional to me, as I ran the printer via USB, so the real problem was XYZ. Debugging was officially in progress…</p><p><img itemprop="thumbnail" src="/img/notion-286bad56-b2ea-4d9c-8857-94109cd9cd02-ender-3.jpg" alt="You can see the &ldquo;ears&rdquo; of the clips on the left and right side of the bed - moments before the disaster"/></p><p>I was pretty sure that the stepper controllers were fried. They are fragile and it happens. Problem was that they were soldered on the PCB. BTW, a quick note:</p><blockquote><p>Dear 3D printing community,
After I was done panicking and crying over my dead printer, I remembered that I know how to wield a soldering iron. So I found the pinouts of the Creality “Melzi” board and scratched the traces (to expose some copper and solder on it) of<code>dir</code> &amp;<code>step</code> to break out the pins and hook them on the backup stepper drivers that I had. I quickly soldered a circuit on protoboard (with solder bridges) to have a nice pinout and hooked the board on it.</p></blockquote><div class="gallery caption-position-bottom caption-effect-none hover-effect-zoom hover-transition" itemscope= itemtype="http://schema.org/ImageGallery"><p><img itemprop="thumbnail" src="/img/notion-fa057475-eb8f-4fba-aa9d-eb850d909694-pcb-steppers-broken-out.jpg" alt="Here you can see the craftsmanship that went into breaking out the stepper motors&rsquo; pins…"/></p><p><img itemprop="thumbnail" src="/img/notion-901112c2-e7d1-4216-8b8c-7c5ea1e044de-custom-stepper-pcb-front.jpg" alt="Front side of the custom stepper motor PCB"/></p><p><img itemprop="thumbnail" src="/img/notion-b971b136-c232-403b-85ff-680afe3e554a-custom-stepper-pcb-back.jpg" alt="Back side of the custom stepper motor PCB"/></p></div><p>Nope, XYZ still dead. Ugh…</p><p>The logic analyzer kindly explained to me that the pins coming from the MCU, were dead - this happens when you feed weird stuff to AVR (e.g. over 5v). They don’t die, they give away that specific pin, they are very tough…</p><p>Well ok, that’s fine, I had a lot of spare pins in the screen connector, now unused. The idea was to remap the step/dir pins to them. That was fairly easy, as I had hooked the whole lanes from the PCB to the steppers, without cutting any traces. After some pain to understand which screen pin is which, I finally did it :) I changed which MCU pins talk to the stepper drivers.</p><p>It was alive :)</p><h2 id="the-rabbit-hole-exhaustion">The Rabbit Hole Exhaustion</h2><p>After that incident, about a year passed and I don’t know why I left the printer on the side. I had fiddled with it too much, I did stuff that where not neceserry. I tried to switch to RAMPS 1.4, but had problem with the heating elements not heating enough, even after cutting the D1 diode (spoiler: it was the polyfuse), I switched to klipper from Marlin and broke the printer into two boards etc. etc. I didn’t get to print anything at that point. Always something was problematic and didn’t let me print.</p><h2 id="the-slap">The Slap</h2><p>About a year passes and I get a girlfriend. I tell her that I have a 3D printer that is currently in an unknown state. She was AMAZED and asked me why I don’t fix it. That was it. That was the slap that I needed to get back in track and fix the damn thing. When a partner gets excited about a nerdy thing you don’t let neither the partner nor the thing go. You just hold on to what you do. Until they orgasm. Or until you orgasm. Or both. Or until you finish the project (lol). Anyway…</p><p>I ordered a replacement board. Gearbest gave me $50 off and I got a new official Creality board for about 20<em>m<strong>o</strong>r**e</em>.<em>K<strong>i</strong>n<strong>d</strong>a<strong>s</strong>t<strong>u</strong>p<strong>i</strong>d<strong>m</strong>o<strong>v</strong>e<strong>a</strong>s<strong>t</strong>h<strong>e</strong>p<strong>r</strong>i<strong>c</strong>e<strong>w</strong>a<strong>s</strong>i<strong>n</strong>s<strong>a</strong>n**e</em>(70 for an arduino with 4 stepper drivers), I know, but I couldn’t get back to the rabbit hole again…</p><p>I hook it up, I hook up the BLTouch and<em>BOOM</em>. It works… and unbelievably silent. A quick google search showed that I luckily upgraded to TMC drivers that are extremely silent. The only noise was the fans! Wow…</p><h2 id="the-happy-ending">The Happy Ending</h2><p>After some playing around and overcoming some difficulties: -<code>G28</code> negates bed leveling, you need a Marlin setting to fix that - Probe X/Y offset settings are not for fun, the bed mesh is shifted - Teflon tube on the hotend goes ALL the way down to the heatblock - PLA pieces can get into the hotend fan and stop it (<a href="/factory/plastic-v01">and we know what that means</a>) - PLA and PLA+ are not the same - Ender 3 plastic extruder is trash - get the aluminum one - Glass bed with carbon finish is amazing - well worth the 20$ - OctoPrint is quite neat &amp; it can send you image notification on Telegram</p><p><img itemprop="thumbnail" src="/img/notion-5b8fd0d5-8c9f-420a-bb44-a9a400a9e402-print-successful.jpg" alt="Example of successful print! :) The design was a bust, but who cares"/></p><p>The printer was actually fine. It still prints very nicely! I’ve print several stuff for home and the GF even got the handle of<a href="https://tinkercad.com/">tinkercad</a> and designed &amp; printed some stuff!</p><p><a href="https://whynot.fail/">WhyNot.Fail</a> is not only about fails, but for success stories too, as 99% of the time they include massive failures.</p></content:encoded></item><item><title>Chinese Factory v0.1 - The-Plastic</title><link>https://whynot.fail/factory/plastic-v01/</link><pubDate>Fri, 11 Oct 2019 00:00:00 +0000</pubDate><guid>https://whynot.fail/factory/plastic-v01/</guid><description>&lt;p>All I ever wanted, was a tiny Chinese factory inside my house. I’m not talking about the people, suicidal thoughts or racism against Chinese people, I’m talking about being able to make stuff. Quickly and effortlessly. So, instead of paying a factory and waiting for a month, I’d like to pay 10x the cost and cry myself to sleep, before I can get what I want. But it’s a one time thing :) (per machine).&lt;/p></description><content:encoded><p>All I ever wanted, was a tiny Chinese factory inside my house. I’m not talking about the people, suicidal thoughts or racism against Chinese people, I’m talking about being able to make stuff. Quickly and effortlessly. So, instead of paying a factory and waiting for a month, I’d like to pay 10x the cost and cry myself to sleep, before I can get what I want. But it’s a one time thing :) (per machine).</p><p>After having so much stuff in mind, it was clear what was the first machine that I needed:<em>angel voices</em> a 3D printer.</p><p>Not only I wanted to make several dumb plastic stuff for the house (like a hanger, soap holder, etc.) and enclosures for several hardware projects, but most importantly: make OTHER machines. It’s like the saying: Crack a hash and you’ll pwn 1 machine, learn to phish and you’ll pwn the planet. So, it was clear (although the saying is not), I NEEDED a 3D Printer.</p><p>I have had experience with a 3D printer and it was absolutely horrible: Warped bed, 2 broken control boards (!) and more than 200 hours of debugging and never been able to print anything but a 10x10mm hollow box. It was a Prusa i3. What did I learned from that:</p><ol><li>How a 3D printer works</li><li>EVERYTHING can and will go wrong</li><li>Auto bed leveling is not optional</li><li>Stepper motors &amp; drivers are rather expensive (most likely the most expensive part on a printer)</li><li>Locknuts on heatbed help a lot (to keep it sturdy for longer times)</li><li>Only Thor can turn locknuts
I thank<a href="https://tolabaki.gr/">tolabaki</a> hackerspace for that. I even spent 2 nights in a couch made from old computer cases for that printer (named Pamela), turned out that wasn’t enough, we needed money as well…</li></ol><p>So after having learned that, you think I’d have an idea on where to head next, for a successful 3D Printer. A ready kit that it’s proven to work and has a wide community? LOL NO. A FUCKING REPRAP DELTA PRINTER THAN NOBODY HAS EVER HEARD BEFORE. I have no idea how I settled for that thing, really. Maybe the lack of money. The printer I’m talking about is<a href="https://reprap.org/wiki/Rostock_mini">Rostock Mini</a>.</p><p><img itemprop="thumbnail" src="/img/notion-d37bfd94-bd60-484d-89ea-93e1df142327-crowd-dissaproves.jpg" alt="You can see the raction of the 3D Printing community for my choice"/></p><p>So, let’s start gathering parts:<a href="https://www.3dhubs.com/">3DHubs</a> for 3D printed parts and eBay for everything else. Now great ideas started flying… Why get a 5mm carbon rod that the RepRap clearly references? I’ll get a 6mm! Sure it’ll work the same! Order the printer base cut in CNC? Nah, lets gather everything else and I’ll just make some holes on a piece of wood. That fan for the all metal E3D v5 hotend is optional, I’m sure.</p><p>Can see where this is going? Let’s break down this disaster…</p><h2 id="the-carbon-rods">The carbon rods</h2><p>As this is a delta 3D printer, it uses some rods to hold the “effector”. The effector is the base that holds the hotend. It needs to be very lightweight, as the motors are pretty far away and the only thing moving the whole construction are GT2 belts. So a good idea is carbon fiber rods. The printer was designed for 5mm carbon fiber rods but I got 1m long 6mm OD carbon fiber rod and cut it by hand.</p><div class="gallery caption-position-bottom caption-effect-none hover-effect-zoom hover-transition" itemscope= itemtype="http://schema.org/ImageGallery"><p><img itemprop="thumbnail" src="/img/notion-4575febb-1eed-4f0a-927a-f5416dc3d5f1-rostock-mini-carbon-rod.jpg" alt="The carbon rods - clearly cut by hand"/></p><p><img itemprop="thumbnail" src="/img/notion-0d6c2e6c-463f-4edb-adf3-5100ef5617bd-rostock-mini-broken-plastic.jpg" alt="The carbon rod mounts - clearly &ldquo;post-processed&rdquo; with a drill"/></p></div><p>The rods where not of the exactly same length and 3D printing teaches you that almost everything has to be precise as fuck. But that did not prove as huge of a problem as the reality of 5mm vs 6mm holes for the rods on tiny plastic parts. When I realised that, I tried drilling the holes. But the parts just broke (duh…).</p><p>So I went for the second best option: find a solution that does not involve cutting the rod by hand and re-printing the small parts that the rods go in.<a href="https://reprap.org/wiki/Kossel">Kossel</a>, that everybody knows and loves, uses some rods that are metal but are ready to go. Their length was precise, they have bearings on their ends etc. They were 20cm instead of 15cm, but I calculated and saw that I’ll just lose some printing area, that was fine.</p><p>Months pass and the rods arrive. YEY! I try to fit them on the effector. NOOOO. They go all over the place, as the bearings are much smaller than the original printed part… Fuck…</p><p>So I got lock nuts, to hold them in place. That seemed to work, so let’s move on…</p><h2 id="the-cnc-cut-base">The CNC cut base</h2><p>I was not able to find a CNC inside Greece and for some reason I didn’t want to use 3DHubs (maybe it had no support for CNC yet?). I thought that I’ll be able to get around it by using a piece of wood and make some holes. NOPE.</p><blockquote><p>3D printing teaches you that almost everything has to be precise as fuck.
Uuugh… Some time passes and I finally find a CNC, right in my city, Heraklion. YEYA. I cut the base DXFs in a CNC! YEYA!!! Wait, that doesn’t seem right. The holes are way off. No…</p></blockquote><p><img itemprop="thumbnail" src="/img/notion-2d39ddd7-2c58-4c0c-95b6-3c3489695463-rostock-mini-base.jpg" alt="The base is clearly completely disoriented, as well as my workspace"/></p><p>But STILL, I thought that this piece of crap might be able to work, so lets move on…</p><h2 id="the-e3d-v5-optional-fan">The E3D v5 “optional” fan</h2><p>I have everything hooked on RAMPS 1.4, motors seem to work correct, endstops work, heatbed works, hotend works. Lets try to melt some PLA. YEY IT WORKS!</p><p>I just play around for some time (less than an hour) and everything goes to hell. I thought that currently I didn’t need the PROVIDED fan that sits on the hotend, as I was just testing… The nut that holds the PTFE (push fit nut?) had melted…</p><p>That was the last sign that I needed to let this project to the side, until I get a proper 3D printer as a kit with auto bed leveling and a community to support it…</p><p>Till then, I’ll be crying in my shower, see ya!</p></content:encoded></item><item><title>About</title><link>https://whynot.fail/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://whynot.fail/about/</guid><description>&lt;p>Your next door humanoid with a grain of love for programming, infosec,
electronics, martial arts/acrobatics, binge watching series till you can&amp;rsquo;t move.
Excited under-engineer (== that&amp;rsquo;s boring, I&amp;rsquo;ll automate it, but I&amp;rsquo;m too bored
to automate it) and rational buyer, cause &amp;ldquo;I&amp;rsquo;ll need it for my next project&amp;rdquo;.
Here you&amp;rsquo;ll find failed or unfinised projects and maybe, JUST MAYBE finished
projects - but don&amp;rsquo;t get your hopes up.&lt;/p>
&lt;p>I&amp;rsquo;m Dimitris Zervas and this is my blog, hopefuly. Lets hope that this project
will fly. That&amp;rsquo;s my hobby, projects about projects.&lt;/p></description><content:encoded><p>Your next door humanoid with a grain of love for programming, infosec,
electronics, martial arts/acrobatics, binge watching series till you can&rsquo;t move.
Excited under-engineer (== that&rsquo;s boring, I&rsquo;ll automate it, but I&rsquo;m too bored
to automate it) and rational buyer, cause &ldquo;I&rsquo;ll need it for my next project&rdquo;.
Here you&rsquo;ll find failed or unfinised projects and maybe, JUST MAYBE finished
projects - but don&rsquo;t get your hopes up.</p><p>I&rsquo;m Dimitris Zervas and this is my blog, hopefuly. Lets hope that this project
will fly. That&rsquo;s my hobby, projects about projects.</p><p>For questions/ideas/whatever, hit me up at dzervas at dzervas dot gr or at
Exarchia, Athens, Greece (don&rsquo;t hit me for real, it&rsquo;s a saying).</p><p>PS: I often cry over code that does not work as I imagined or my 3D printer.
You&rsquo;ve been warned.</p><p>Have a nice trip!</p></content:encoded></item></channel></rss>